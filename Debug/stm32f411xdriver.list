
stm32f411xdriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d1c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001eb4  08001eb4  00002eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ee8  08001ee8  00003070  2**0
                  CONTENTS
  4 .ARM          00000000  08001ee8  08001ee8  00003070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ee8  08001ee8  00003070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ee8  08001ee8  00002ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001eec  08001eec  00002eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001ef0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000070  08001f60  00003070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08001f60  00003204  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00003070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000203f  00000000  00000000  0000309a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007c1  00000000  00000000  000050d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a0  00000000  00000000  000058a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001ea  00000000  00000000  00005b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000380e  00000000  00000000  00005d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002eab  00000000  00000000  00009538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c0a8  00000000  00000000  0000c3e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001848b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001048  00000000  00000000  000184d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00019518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001e9c 	.word	0x08001e9c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08001e9c 	.word	0x08001e9c

080001d8 <delay>:
#include "stm32f411x.h"

#define MY_ADDR 0x61
I2C_Handle_t I2C1Handle;

void delay(void){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<2500000;i++);
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	@ (8000200 <delay+0x28>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d3f8      	bcc.n	80001e4 <delay+0xc>
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	002625a0 	.word	0x002625a0

08000204 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
	GPIO_handle_t GPIOBtn;
	GPIOBtn.pGPIOX=GPIOA;
 800020a:	4b09      	ldr	r3, [pc, #36]	@ (8000230 <GPIO_ButtonInit+0x2c>)
 800020c:	607b      	str	r3, [r7, #4]

	GPIOBtn.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_IN;
 800020e:	2300      	movs	r3, #0
 8000210:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_0;
 8000212:	2300      	movs	r3, #0
 8000214:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 8000216:	2300      	movs	r3, #0
 8000218:	72fb      	strb	r3, [r7, #11]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 800021a:	2302      	movs	r3, #2
 800021c:	72bb      	strb	r3, [r7, #10]

	GPIO_Init(&GPIOBtn);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f9ef 	bl	8000604 <GPIO_Init>
}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40020000 	.word	0x40020000

08000234 <I2C_GPIOInit>:

void I2C_GPIOInit(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
	GPIO_handle_t I2CPins;
	I2CPins.pGPIOX=GPIOB;
 800023a:	4b0e      	ldr	r3, [pc, #56]	@ (8000274 <I2C_GPIOInit+0x40>)
 800023c:	607b      	str	r3, [r7, #4]

	I2CPins.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_ALTFN;
 800023e:	2302      	movs	r3, #2
 8000240:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode=4;
 8000242:	2304      	movs	r3, #4
 8000244:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 8000246:	2300      	movs	r3, #0
 8000248:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_OD;
 800024a:	2301      	movs	r3, #1
 800024c:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 800024e:	2302      	movs	r3, #2
 8000250:	72bb      	strb	r3, [r7, #10]

	//SCL PIN
	I2CPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_8;
 8000252:	2308      	movs	r3, #8
 8000254:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	4618      	mov	r0, r3
 800025a:	f000 f9d3 	bl	8000604 <GPIO_Init>

	//SDA PIN
	I2CPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_7;
 800025e:	2307      	movs	r3, #7
 8000260:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f9cd 	bl	8000604 <GPIO_Init>

}
 800026a:	bf00      	nop
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40020400 	.word	0x40020400

08000278 <I2C1_Init>:

void I2C1_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0


	I2C1Handle.pI2Cx=I2C1;
 800027c:	4b09      	ldr	r3, [pc, #36]	@ (80002a4 <I2C1_Init+0x2c>)
 800027e:	4a0a      	ldr	r2, [pc, #40]	@ (80002a8 <I2C1_Init+0x30>)
 8000280:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_EN;
 8000282:	4b08      	ldr	r3, [pc, #32]	@ (80002a4 <I2C1_Init+0x2c>)
 8000284:	2201      	movs	r2, #1
 8000286:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000288:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <I2C1_Init+0x2c>)
 800028a:	2261      	movs	r2, #97	@ 0x61
 800028c:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle=I2C_FM_DUTY_2;
 800028e:	4b05      	ldr	r3, [pc, #20]	@ (80002a4 <I2C1_Init+0x2c>)
 8000290:	2200      	movs	r2, #0
 8000292:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed=I2C_SCL_SPEED_SM;
 8000294:	4b03      	ldr	r3, [pc, #12]	@ (80002a4 <I2C1_Init+0x2c>)
 8000296:	4a05      	ldr	r2, [pc, #20]	@ (80002ac <I2C1_Init+0x34>)
 8000298:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800029a:	4802      	ldr	r0, [pc, #8]	@ (80002a4 <I2C1_Init+0x2c>)
 800029c:	f000 fdf0 	bl	8000e80 <I2C_Init>

}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	2000008c 	.word	0x2000008c
 80002a8:	40005400 	.word	0x40005400
 80002ac:	000186a0 	.word	0x000186a0

080002b0 <main>:
int main()
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b08c      	sub	sp, #48	@ 0x30
 80002b4:	af02      	add	r7, sp, #8

	uint8_t SlaveAddr = 0x68;
 80002b6:	2368      	movs	r3, #104	@ 0x68
 80002b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t cmdLen=0x51;
 80002bc:	2351      	movs	r3, #81	@ 0x51
 80002be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t cmdData=0x52;
 80002c2:	2352      	movs	r3, #82	@ 0x52
 80002c4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t RcvLen,RcvData[32];


	//initialize the input onboard user button
	GPIO_ButtonInit();
 80002c8:	f7ff ff9c 	bl	8000204 <GPIO_ButtonInit>

	//initialize the I2C peripheral gpio
	I2C_GPIOInit();
 80002cc:	f7ff ffb2 	bl	8000234 <I2C_GPIOInit>

	//initialize the I2C peripheral
	I2C1_Init();
 80002d0:	f7ff ffd2 	bl	8000278 <I2C1_Init>

	//I2C IRQ CONFIGURATION
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV,ENABLE);
 80002d4:	2101      	movs	r1, #1
 80002d6:	201f      	movs	r0, #31
 80002d8:	f000 ff36 	bl	8001148 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER,ENABLE);
 80002dc:	2101      	movs	r1, #1
 80002de:	2020      	movs	r0, #32
 80002e0:	f000 ff32 	bl	8001148 <I2C_IRQInterruptConfig>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 80002e4:	2101      	movs	r1, #1
 80002e6:	482b      	ldr	r0, [pc, #172]	@ (8000394 <main+0xe4>)
 80002e8:	f000 ffb2 	bl	8001250 <I2C_PeripheralControl>

	//enable acking
	I2C1->CR1 |=(1<<I2C_CR1_ACK);
 80002ec:	4b29      	ldr	r3, [pc, #164]	@ (8000394 <main+0xe4>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a28      	ldr	r2, [pc, #160]	@ (8000394 <main+0xe4>)
 80002f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002f6:	6013      	str	r3, [r2, #0]

	while(1)
	{

		delay();
 80002f8:	f7ff ff6e 	bl	80001d8 <delay>
		//wait for button to be pushed
		while(!GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0));
 80002fc:	bf00      	nop
 80002fe:	2100      	movs	r1, #0
 8000300:	4825      	ldr	r0, [pc, #148]	@ (8000398 <main+0xe8>)
 8000302:	f000 fbb9 	bl	8000a78 <GPIO_ReadFromInputPin>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0f8      	beq.n	80002fe <main+0x4e>

		//to avoid switch debouncing
		delay();
 800030c:	f7ff ff64 	bl	80001d8 <delay>

		//send the first command to recevie the length of data slave is sending
		while(I2C_MasterSendDataIT(&I2C1Handle,&cmdLen,1,SlaveAddr,I2C_ENABLE_SR) != I2C_READY);
 8000310:	bf00      	nop
 8000312:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000316:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 800031a:	2201      	movs	r2, #1
 800031c:	9200      	str	r2, [sp, #0]
 800031e:	2201      	movs	r2, #1
 8000320:	481e      	ldr	r0, [pc, #120]	@ (800039c <main+0xec>)
 8000322:	f000 fe80 	bl	8001026 <I2C_MasterSendDataIT>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d1f2      	bne.n	8000312 <main+0x62>

		//receive the length info from the slave
		while(I2C_MasterReceiveDataIT(&I2C1Handle,&RcvLen,1,SlaveAddr,I2C_ENABLE_SR)!= I2C_READY);
 800032c:	bf00      	nop
 800032e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000332:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000336:	2201      	movs	r2, #1
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	2201      	movs	r2, #1
 800033c:	4817      	ldr	r0, [pc, #92]	@ (800039c <main+0xec>)
 800033e:	f000 feb9 	bl	80010b4 <I2C_MasterReceiveDataIT>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d1f2      	bne.n	800032e <main+0x7e>

		//send the second command to receive the data from the slave is sending
		while(I2C_MasterSendDataIT(&I2C1Handle,&cmdData,1,SlaveAddr,I2C_ENABLE_SR)!= I2C_READY);
 8000348:	bf00      	nop
 800034a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800034e:	f107 0125 	add.w	r1, r7, #37	@ 0x25
 8000352:	2201      	movs	r2, #1
 8000354:	9200      	str	r2, [sp, #0]
 8000356:	2201      	movs	r2, #1
 8000358:	4810      	ldr	r0, [pc, #64]	@ (800039c <main+0xec>)
 800035a:	f000 fe64 	bl	8001026 <I2C_MasterSendDataIT>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d1f2      	bne.n	800034a <main+0x9a>

		//store the received data in the buffer
		while(I2C_MasterReceiveDataIT(&I2C1Handle,RcvData,RcvLen,SlaveAddr,I2C_DISABLE_SR)!= I2C_READY);
 8000364:	bf00      	nop
 8000366:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800036a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800036e:	1d39      	adds	r1, r7, #4
 8000370:	2000      	movs	r0, #0
 8000372:	9000      	str	r0, [sp, #0]
 8000374:	4809      	ldr	r0, [pc, #36]	@ (800039c <main+0xec>)
 8000376:	f000 fe9d 	bl	80010b4 <I2C_MasterReceiveDataIT>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d1f2      	bne.n	8000366 <main+0xb6>

		RcvData[RcvLen+1]='\0';
 8000380:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000384:	3301      	adds	r3, #1
 8000386:	3328      	adds	r3, #40	@ 0x28
 8000388:	443b      	add	r3, r7
 800038a:	2200      	movs	r2, #0
 800038c:	f803 2c24 	strb.w	r2, [r3, #-36]
		delay();
 8000390:	e7b2      	b.n	80002f8 <main+0x48>
 8000392:	bf00      	nop
 8000394:	40005400 	.word	0x40005400
 8000398:	40020000 	.word	0x40020000
 800039c:	2000008c 	.word	0x2000008c

080003a0 <I2C1_EV_IRQHandler>:

	return 0;
}

void I2C1_EV_IRQHandler(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 80003a4:	4802      	ldr	r0, [pc, #8]	@ (80003b0 <I2C1_EV_IRQHandler+0x10>)
 80003a6:	f000 ff6e 	bl	8001286 <I2C_EV_IRQHandling>
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	2000008c 	.word	0x2000008c

080003b4 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 80003b8:	4802      	ldr	r0, [pc, #8]	@ (80003c4 <I2C1_ER_IRQHandler+0x10>)
 80003ba:	f001 f840 	bl	800143e <I2C_ER_IRQHandling>
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	2000008c 	.word	0x2000008c

080003c8 <I2C_ApplicationEventCallback>:


void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle,uint8_t AppEv)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	460b      	mov	r3, r1
 80003d2:	70fb      	strb	r3, [r7, #3]
	if(AppEv == I2C_EV_TX_CMPLT)
 80003d4:	78fb      	ldrb	r3, [r7, #3]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d103      	bne.n	80003e2 <I2C_ApplicationEventCallback+0x1a>
	 {
		 printf("Tx is completed\n");
 80003da:	480e      	ldr	r0, [pc, #56]	@ (8000414 <I2C_ApplicationEventCallback+0x4c>)
 80003dc:	f001 f9ce 	bl	800177c <puts>
		 I2C_GenerateStopCondition(I2C1);

		 //Hang in infinite loop
		 while(1);
	 }
}
 80003e0:	e014      	b.n	800040c <I2C_ApplicationEventCallback+0x44>
	 }else if (AppEv == I2C_EV_RX_CMPLT)
 80003e2:	78fb      	ldrb	r3, [r7, #3]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d103      	bne.n	80003f0 <I2C_ApplicationEventCallback+0x28>
		 printf("Rx is completed\n");
 80003e8:	480b      	ldr	r0, [pc, #44]	@ (8000418 <I2C_ApplicationEventCallback+0x50>)
 80003ea:	f001 f9c7 	bl	800177c <puts>
}
 80003ee:	e00d      	b.n	800040c <I2C_ApplicationEventCallback+0x44>
	 }else if (AppEv == I2C_ERROR_AF)
 80003f0:	78fb      	ldrb	r3, [r7, #3]
 80003f2:	2b05      	cmp	r3, #5
 80003f4:	d10a      	bne.n	800040c <I2C_ApplicationEventCallback+0x44>
		 printf("Error : Ack failure\n");
 80003f6:	4809      	ldr	r0, [pc, #36]	@ (800041c <I2C_ApplicationEventCallback+0x54>)
 80003f8:	f001 f9c0 	bl	800177c <puts>
		 I2C_CloseSendData(pI2CHandle);
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f000 fb9f 	bl	8000b40 <I2C_CloseSendData>
		 I2C_GenerateStopCondition(I2C1);
 8000402:	4807      	ldr	r0, [pc, #28]	@ (8000420 <I2C_ApplicationEventCallback+0x58>)
 8000404:	f000 fb63 	bl	8000ace <I2C_GenerateStopCondition>
		 while(1);
 8000408:	bf00      	nop
 800040a:	e7fd      	b.n	8000408 <I2C_ApplicationEventCallback+0x40>
}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	08001eb4 	.word	0x08001eb4
 8000418:	08001ec4 	.word	0x08001ec4
 800041c:	08001ed4 	.word	0x08001ed4
 8000420:	40005400 	.word	0x40005400

08000424 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800042e:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <ITM_SendChar+0x44>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a0d      	ldr	r2, [pc, #52]	@ (8000468 <ITM_SendChar+0x44>)
 8000434:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000438:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800043a:	4b0c      	ldr	r3, [pc, #48]	@ (800046c <ITM_SendChar+0x48>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a0b      	ldr	r2, [pc, #44]	@ (800046c <ITM_SendChar+0x48>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000446:	bf00      	nop
 8000448:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0f8      	beq.n	8000448 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000456:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	6013      	str	r3, [r2, #0]
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	e000edfc 	.word	0xe000edfc
 800046c:	e0000e00 	.word	0xe0000e00

08000470 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047c:	2300      	movs	r3, #0
 800047e:	617b      	str	r3, [r7, #20]
 8000480:	e00a      	b.n	8000498 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000482:	f3af 8000 	nop.w
 8000486:	4601      	mov	r1, r0
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	1c5a      	adds	r2, r3, #1
 800048c:	60ba      	str	r2, [r7, #8]
 800048e:	b2ca      	uxtb	r2, r1
 8000490:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	3301      	adds	r3, #1
 8000496:	617b      	str	r3, [r7, #20]
 8000498:	697a      	ldr	r2, [r7, #20]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	429a      	cmp	r2, r3
 800049e:	dbf0      	blt.n	8000482 <_read+0x12>
  }

  return len;
 80004a0:	687b      	ldr	r3, [r7, #4]
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3718      	adds	r7, #24
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b086      	sub	sp, #24
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	60f8      	str	r0, [r7, #12]
 80004b2:	60b9      	str	r1, [r7, #8]
 80004b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
 80004ba:	e009      	b.n	80004d0 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	60ba      	str	r2, [r7, #8]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ffad 	bl	8000424 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	3301      	adds	r3, #1
 80004ce:	617b      	str	r3, [r7, #20]
 80004d0:	697a      	ldr	r2, [r7, #20]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	dbf1      	blt.n	80004bc <_write+0x12>
  }
  return len;
 80004d8:	687b      	ldr	r3, [r7, #4]
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3718      	adds	r7, #24
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <_close>:

int _close(int file)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000508:	605a      	str	r2, [r3, #4]
  return 0;
 800050a:	2300      	movs	r3, #0
}
 800050c:	4618      	mov	r0, r3
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr

08000516 <_isatty>:

int _isatty(int file)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800051e:	2301      	movs	r3, #1
}
 8000520:	4618      	mov	r0, r3
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr

0800052a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800052a:	b480      	push	{r7}
 800052c:	b085      	sub	sp, #20
 800052e:	af00      	add	r7, sp, #0
 8000530:	60f8      	str	r0, [r7, #12]
 8000532:	60b9      	str	r1, [r7, #8]
 8000534:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000536:	2300      	movs	r3, #0
}
 8000538:	4618      	mov	r0, r3
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
	...

08000544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800054c:	4a14      	ldr	r2, [pc, #80]	@ (80005a0 <_sbrk+0x5c>)
 800054e:	4b15      	ldr	r3, [pc, #84]	@ (80005a4 <_sbrk+0x60>)
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000558:	4b13      	ldr	r3, [pc, #76]	@ (80005a8 <_sbrk+0x64>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d102      	bne.n	8000566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000560:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <_sbrk+0x64>)
 8000562:	4a12      	ldr	r2, [pc, #72]	@ (80005ac <_sbrk+0x68>)
 8000564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <_sbrk+0x64>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	693a      	ldr	r2, [r7, #16]
 8000570:	429a      	cmp	r2, r3
 8000572:	d207      	bcs.n	8000584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000574:	f001 fa30 	bl	80019d8 <__errno>
 8000578:	4603      	mov	r3, r0
 800057a:	220c      	movs	r2, #12
 800057c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800057e:	f04f 33ff 	mov.w	r3, #4294967295
 8000582:	e009      	b.n	8000598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000584:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <_sbrk+0x64>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800058a:	4b07      	ldr	r3, [pc, #28]	@ (80005a8 <_sbrk+0x64>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	4a05      	ldr	r2, [pc, #20]	@ (80005a8 <_sbrk+0x64>)
 8000594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000596:	68fb      	ldr	r3, [r7, #12]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3718      	adds	r7, #24
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20020000 	.word	0x20020000
 80005a4:	00000400 	.word	0x00000400
 80005a8:	200000b4 	.word	0x200000b4
 80005ac:	20000208 	.word	0x20000208

080005b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b0:	480d      	ldr	r0, [pc, #52]	@ (80005e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480c      	ldr	r0, [pc, #48]	@ (80005ec <LoopForever+0x6>)
  ldr r1, =_edata
 80005ba:	490d      	ldr	r1, [pc, #52]	@ (80005f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005bc:	4a0d      	ldr	r2, [pc, #52]	@ (80005f4 <LoopForever+0xe>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a0a      	ldr	r2, [pc, #40]	@ (80005f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d0:	4c0a      	ldr	r4, [pc, #40]	@ (80005fc <LoopForever+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005de:	f001 fa01 	bl	80019e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e2:	f7ff fe65 	bl	80002b0 <main>

080005e6 <LoopForever>:

LoopForever:
  b LoopForever
 80005e6:	e7fe      	b.n	80005e6 <LoopForever>
  ldr   r0, =_estack
 80005e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80005f4:	08001ef0 	.word	0x08001ef0
  ldr r2, =_sbss
 80005f8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80005fc:	20000204 	.word	0x20000204

08000600 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC_IRQHandler>
	...

08000604 <GPIO_Init>:
 * @return            - none
 *
 * @Note              - none

 */
void GPIO_Init(GPIO_handle_t *pGPIOHandle){
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

	/*configure the mode of gpio pin*/
	uint32_t temp=0;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]

	//Enable the pheripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOX,ENABLE);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f000 f98e 	bl	8000938 <GPIO_PeriClockControl>

	//if the pin mode is not an interrupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_ANALOG){
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	795b      	ldrb	r3, [r3, #5]
 8000620:	2b03      	cmp	r3, #3
 8000622:	d821      	bhi.n	8000668 <GPIO_Init+0x64>

		temp=pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<<(2*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	795b      	ldrb	r3, [r3, #5]
 8000628:	461a      	mov	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOX->MODER &=~(3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	791b      	ldrb	r3, [r3, #4]
 8000640:	4619      	mov	r1, r3
 8000642:	2303      	movs	r3, #3
 8000644:	408b      	lsls	r3, r1
 8000646:	43db      	mvns	r3, r3
 8000648:	4619      	mov	r1, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	400a      	ands	r2, r1
 8000650:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOX->MODER |=temp;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	6819      	ldr	r1, [r3, #0]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	697a      	ldr	r2, [r7, #20]
 800065e:	430a      	orrs	r2, r1
 8000660:	601a      	str	r2, [r3, #0]
		temp=0;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
 8000666:	e0c9      	b.n	80007fc <GPIO_Init+0x1f8>
	}

	else{
		//interrupt modes
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_FT){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	795b      	ldrb	r3, [r3, #5]
 800066c:	2b04      	cmp	r3, #4
 800066e:	d117      	bne.n	80006a0 <GPIO_Init+0x9c>
			//1.configure the FTSR (Falling trigger Selection Register)
			EXTI->EXTI_FTSR |=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000670:	4b40      	ldr	r3, [pc, #256]	@ (8000774 <GPIO_Init+0x170>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	7912      	ldrb	r2, [r2, #4]
 8000678:	4611      	mov	r1, r2
 800067a:	2201      	movs	r2, #1
 800067c:	408a      	lsls	r2, r1
 800067e:	4611      	mov	r1, r2
 8000680:	4a3c      	ldr	r2, [pc, #240]	@ (8000774 <GPIO_Init+0x170>)
 8000682:	430b      	orrs	r3, r1
 8000684:	60d3      	str	r3, [r2, #12]
			//clear the corresponding rtsr bit
			EXTI->EXTI_RTSR &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000686:	4b3b      	ldr	r3, [pc, #236]	@ (8000774 <GPIO_Init+0x170>)
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	7912      	ldrb	r2, [r2, #4]
 800068e:	4611      	mov	r1, r2
 8000690:	2201      	movs	r2, #1
 8000692:	408a      	lsls	r2, r1
 8000694:	43d2      	mvns	r2, r2
 8000696:	4611      	mov	r1, r2
 8000698:	4a36      	ldr	r2, [pc, #216]	@ (8000774 <GPIO_Init+0x170>)
 800069a:	400b      	ands	r3, r1
 800069c:	6093      	str	r3, [r2, #8]
 800069e:	e035      	b.n	800070c <GPIO_Init+0x108>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_IT_RT){
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	795b      	ldrb	r3, [r3, #5]
 80006a4:	2b05      	cmp	r3, #5
 80006a6:	d817      	bhi.n	80006d8 <GPIO_Init+0xd4>
			//1.configure the RTSR (Rising trigger Selection Register)
			EXTI->EXTI_RTSR |=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006a8:	4b32      	ldr	r3, [pc, #200]	@ (8000774 <GPIO_Init+0x170>)
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	7912      	ldrb	r2, [r2, #4]
 80006b0:	4611      	mov	r1, r2
 80006b2:	2201      	movs	r2, #1
 80006b4:	408a      	lsls	r2, r1
 80006b6:	4611      	mov	r1, r2
 80006b8:	4a2e      	ldr	r2, [pc, #184]	@ (8000774 <GPIO_Init+0x170>)
 80006ba:	430b      	orrs	r3, r1
 80006bc:	6093      	str	r3, [r2, #8]
			//clear the corresponding ftrs bit
			EXTI->EXTI_FTSR &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <GPIO_Init+0x170>)
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	7912      	ldrb	r2, [r2, #4]
 80006c6:	4611      	mov	r1, r2
 80006c8:	2201      	movs	r2, #1
 80006ca:	408a      	lsls	r2, r1
 80006cc:	43d2      	mvns	r2, r2
 80006ce:	4611      	mov	r1, r2
 80006d0:	4a28      	ldr	r2, [pc, #160]	@ (8000774 <GPIO_Init+0x170>)
 80006d2:	400b      	ands	r3, r1
 80006d4:	60d3      	str	r3, [r2, #12]
 80006d6:	e019      	b.n	800070c <GPIO_Init+0x108>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_IT_RFT){
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	795b      	ldrb	r3, [r3, #5]
 80006dc:	2b06      	cmp	r3, #6
 80006de:	d815      	bhi.n	800070c <GPIO_Init+0x108>
			//1.configure both the FTSR and RTSR
			//configure the FTSR (Falling trigger Selection Register)
			EXTI->EXTI_FTSR |=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e0:	4b24      	ldr	r3, [pc, #144]	@ (8000774 <GPIO_Init+0x170>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	7912      	ldrb	r2, [r2, #4]
 80006e8:	4611      	mov	r1, r2
 80006ea:	2201      	movs	r2, #1
 80006ec:	408a      	lsls	r2, r1
 80006ee:	4611      	mov	r1, r2
 80006f0:	4a20      	ldr	r2, [pc, #128]	@ (8000774 <GPIO_Init+0x170>)
 80006f2:	430b      	orrs	r3, r1
 80006f4:	60d3      	str	r3, [r2, #12]
			//configure the RTSR (Rising trigger Selection Register)
			EXTI->EXTI_RTSR |=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000774 <GPIO_Init+0x170>)
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	7912      	ldrb	r2, [r2, #4]
 80006fe:	4611      	mov	r1, r2
 8000700:	2201      	movs	r2, #1
 8000702:	408a      	lsls	r2, r1
 8000704:	4611      	mov	r1, r2
 8000706:	4a1b      	ldr	r2, [pc, #108]	@ (8000774 <GPIO_Init+0x170>)
 8000708:	430b      	orrs	r3, r1
 800070a:	6093      	str	r3, [r2, #8]

		}

		//2. configure the gpio port selecton in SYSCFG_EXTICR
		uint8_t ExtiReg = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	791b      	ldrb	r3, [r3, #4]
 8000710:	089b      	lsrs	r3, r3, #2
 8000712:	74fb      	strb	r3, [r7, #19]
		uint8_t shifts=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	791b      	ldrb	r3, [r3, #4]
 8000718:	f003 0303 	and.w	r3, r3, #3
 800071c:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode=GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOX);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a15      	ldr	r2, [pc, #84]	@ (8000778 <GPIO_Init+0x174>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d033      	beq.n	8000790 <GPIO_Init+0x18c>
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a13      	ldr	r2, [pc, #76]	@ (800077c <GPIO_Init+0x178>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d01d      	beq.n	800076e <GPIO_Init+0x16a>
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a12      	ldr	r2, [pc, #72]	@ (8000780 <GPIO_Init+0x17c>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d016      	beq.n	800076a <GPIO_Init+0x166>
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a10      	ldr	r2, [pc, #64]	@ (8000784 <GPIO_Init+0x180>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d00f      	beq.n	8000766 <GPIO_Init+0x162>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a0f      	ldr	r2, [pc, #60]	@ (8000788 <GPIO_Init+0x184>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d008      	beq.n	8000762 <GPIO_Init+0x15e>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a0d      	ldr	r2, [pc, #52]	@ (800078c <GPIO_Init+0x188>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d101      	bne.n	800075e <GPIO_Init+0x15a>
 800075a:	2307      	movs	r3, #7
 800075c:	e019      	b.n	8000792 <GPIO_Init+0x18e>
 800075e:	2300      	movs	r3, #0
 8000760:	e017      	b.n	8000792 <GPIO_Init+0x18e>
 8000762:	2304      	movs	r3, #4
 8000764:	e015      	b.n	8000792 <GPIO_Init+0x18e>
 8000766:	2303      	movs	r3, #3
 8000768:	e013      	b.n	8000792 <GPIO_Init+0x18e>
 800076a:	2302      	movs	r3, #2
 800076c:	e011      	b.n	8000792 <GPIO_Init+0x18e>
 800076e:	2301      	movs	r3, #1
 8000770:	e00f      	b.n	8000792 <GPIO_Init+0x18e>
 8000772:	bf00      	nop
 8000774:	40013c00 	.word	0x40013c00
 8000778:	40020000 	.word	0x40020000
 800077c:	40020400 	.word	0x40020400
 8000780:	40020800 	.word	0x40020800
 8000784:	40020c00 	.word	0x40020c00
 8000788:	40021000 	.word	0x40021000
 800078c:	40021c00 	.word	0x40021c00
 8000790:	2300      	movs	r3, #0
 8000792:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000794:	4b65      	ldr	r3, [pc, #404]	@ (800092c <GPIO_Init+0x328>)
 8000796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000798:	4a64      	ldr	r2, [pc, #400]	@ (800092c <GPIO_Init+0x328>)
 800079a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800079e:	6453      	str	r3, [r2, #68]	@ 0x44

		//clear
		SYSCFG->EXTICR[ExtiReg]&=~(0xF<<(shifts*4));
 80007a0:	4a63      	ldr	r2, [pc, #396]	@ (8000930 <GPIO_Init+0x32c>)
 80007a2:	7cfb      	ldrb	r3, [r7, #19]
 80007a4:	3302      	adds	r3, #2
 80007a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007aa:	7cbb      	ldrb	r3, [r7, #18]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	210f      	movs	r1, #15
 80007b0:	fa01 f303 	lsl.w	r3, r1, r3
 80007b4:	43db      	mvns	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	495d      	ldr	r1, [pc, #372]	@ (8000930 <GPIO_Init+0x32c>)
 80007ba:	7cfb      	ldrb	r3, [r7, #19]
 80007bc:	4002      	ands	r2, r0
 80007be:	3302      	adds	r3, #2
 80007c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//set
		SYSCFG->EXTICR[ExtiReg]|=portCode<<(shifts*4);
 80007c4:	4a5a      	ldr	r2, [pc, #360]	@ (8000930 <GPIO_Init+0x32c>)
 80007c6:	7cfb      	ldrb	r3, [r7, #19]
 80007c8:	3302      	adds	r3, #2
 80007ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007ce:	7c79      	ldrb	r1, [r7, #17]
 80007d0:	7cbb      	ldrb	r3, [r7, #18]
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	fa01 f303 	lsl.w	r3, r1, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	4955      	ldr	r1, [pc, #340]	@ (8000930 <GPIO_Init+0x32c>)
 80007dc:	7cfb      	ldrb	r3, [r7, #19]
 80007de:	4302      	orrs	r2, r0
 80007e0:	3302      	adds	r3, #2
 80007e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3.enable the interrupt delivery using IMR
		EXTI->EXTI_IMR |=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007e6:	4b53      	ldr	r3, [pc, #332]	@ (8000934 <GPIO_Init+0x330>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	7912      	ldrb	r2, [r2, #4]
 80007ee:	4611      	mov	r1, r2
 80007f0:	2201      	movs	r2, #1
 80007f2:	408a      	lsls	r2, r1
 80007f4:	4611      	mov	r1, r2
 80007f6:	4a4f      	ldr	r2, [pc, #316]	@ (8000934 <GPIO_Init+0x330>)
 80007f8:	430b      	orrs	r3, r1
 80007fa:	6013      	str	r3, [r2, #0]
	}

	//temp=0;
	//configure the speed
	temp=pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed<<(2*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	799b      	ldrb	r3, [r3, #6]
 8000800:	461a      	mov	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	791b      	ldrb	r3, [r3, #4]
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	fa02 f303 	lsl.w	r3, r2, r3
 800080c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOX->OSPEEDR &=~(3<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	689a      	ldr	r2, [r3, #8]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	791b      	ldrb	r3, [r3, #4]
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	2103      	movs	r1, #3
 800081c:	fa01 f303 	lsl.w	r3, r1, r3
 8000820:	43db      	mvns	r3, r3
 8000822:	4619      	mov	r1, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	400a      	ands	r2, r1
 800082a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOX->OSPEEDR |=temp;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	6899      	ldr	r1, [r3, #8]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	697a      	ldr	r2, [r7, #20]
 8000838:	430a      	orrs	r2, r1
 800083a:	609a      	str	r2, [r3, #8]

	//configure the pull up pull down settings
	temp=pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<(2*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	79db      	ldrb	r3, [r3, #7]
 8000840:	461a      	mov	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	791b      	ldrb	r3, [r3, #4]
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOX->PUPDR &=~(3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	68da      	ldr	r2, [r3, #12]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	791b      	ldrb	r3, [r3, #4]
 8000858:	4619      	mov	r1, r3
 800085a:	2303      	movs	r3, #3
 800085c:	408b      	lsls	r3, r1
 800085e:	43db      	mvns	r3, r3
 8000860:	4619      	mov	r1, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	400a      	ands	r2, r1
 8000868:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOX->PUPDR |=temp;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	68d9      	ldr	r1, [r3, #12]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	430a      	orrs	r2, r1
 8000878:	60da      	str	r2, [r3, #12]
	//temp=0;
	//configure the optype
	temp=pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType<<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	7a1b      	ldrb	r3, [r3, #8]
 800087e:	461a      	mov	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	791b      	ldrb	r3, [r3, #4]
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOX->OTYPER &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	685a      	ldr	r2, [r3, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	791b      	ldrb	r3, [r3, #4]
 8000894:	4619      	mov	r1, r3
 8000896:	2301      	movs	r3, #1
 8000898:	408b      	lsls	r3, r1
 800089a:	43db      	mvns	r3, r3
 800089c:	4619      	mov	r1, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	400a      	ands	r2, r1
 80008a4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOX->OTYPER |=temp;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	6859      	ldr	r1, [r3, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	430a      	orrs	r2, r1
 80008b4:	605a      	str	r2, [r3, #4]

	//configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_ALTFN){
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	795b      	ldrb	r3, [r3, #5]
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d131      	bne.n	8000922 <GPIO_Init+0x31e>
		uint8_t temp1;
		uint8_t temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	791b      	ldrb	r3, [r3, #4]
 80008c2:	08db      	lsrs	r3, r3, #3
 80008c4:	743b      	strb	r3, [r7, #16]
		temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOX->AFR[temp1] &= ~(0xF<<(4*temp2));
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	7c3a      	ldrb	r2, [r7, #16]
 80008d6:	3208      	adds	r2, #8
 80008d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	220f      	movs	r2, #15
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	7c3a      	ldrb	r2, [r7, #16]
 80008f0:	4001      	ands	r1, r0
 80008f2:	3208      	adds	r2, #8
 80008f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOX->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode<<(4*temp2));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	7c3a      	ldrb	r2, [r7, #16]
 80008fe:	3208      	adds	r2, #8
 8000900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	7a5b      	ldrb	r3, [r3, #9]
 8000908:	461a      	mov	r2, r3
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	4618      	mov	r0, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	7c3a      	ldrb	r2, [r7, #16]
 800091a:	4301      	orrs	r1, r0
 800091c:	3208      	adds	r2, #8
 800091e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		}


}
 8000922:	bf00      	nop
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800
 8000930:	40013800 	.word	0x40013800
 8000934:	40013c00 	.word	0x40013c00

08000938 <GPIO_PeriClockControl>:
 * @return            - none
 *
 * @Note              - none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,uint8_t EnorDi){
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000944:	78fb      	ldrb	r3, [r7, #3]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d141      	bne.n	80009ce <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a43      	ldr	r2, [pc, #268]	@ (8000a5c <GPIO_PeriClockControl+0x124>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d106      	bne.n	8000960 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000952:	4b43      	ldr	r3, [pc, #268]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a42      	ldr	r2, [pc, #264]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
		{
			GPIOH_PCLK_DI();
		}
	}

}
 800095e:	e077      	b.n	8000a50 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOB)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a40      	ldr	r2, [pc, #256]	@ (8000a64 <GPIO_PeriClockControl+0x12c>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d106      	bne.n	8000976 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000968:	4b3d      	ldr	r3, [pc, #244]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096c:	4a3c      	ldr	r2, [pc, #240]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 800096e:	f043 0302 	orr.w	r3, r3, #2
 8000972:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000974:	e06c      	b.n	8000a50 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOC)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a3b      	ldr	r2, [pc, #236]	@ (8000a68 <GPIO_PeriClockControl+0x130>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d106      	bne.n	800098c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800097e:	4b38      	ldr	r3, [pc, #224]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	4a37      	ldr	r2, [pc, #220]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800098a:	e061      	b.n	8000a50 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOD)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a37      	ldr	r2, [pc, #220]	@ (8000a6c <GPIO_PeriClockControl+0x134>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d106      	bne.n	80009a2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000994:	4b32      	ldr	r3, [pc, #200]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000998:	4a31      	ldr	r2, [pc, #196]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 800099a:	f043 0308 	orr.w	r3, r3, #8
 800099e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009a0:	e056      	b.n	8000a50 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOE)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a32      	ldr	r2, [pc, #200]	@ (8000a70 <GPIO_PeriClockControl+0x138>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d106      	bne.n	80009b8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80009aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a2c      	ldr	r2, [pc, #176]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 80009b0:	f043 0310 	orr.w	r3, r3, #16
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009b6:	e04b      	b.n	8000a50 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOH)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a2e      	ldr	r2, [pc, #184]	@ (8000a74 <GPIO_PeriClockControl+0x13c>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d147      	bne.n	8000a50 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 80009c0:	4b27      	ldr	r3, [pc, #156]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 80009c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c4:	4a26      	ldr	r2, [pc, #152]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 80009c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ca:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009cc:	e040      	b.n	8000a50 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a22      	ldr	r2, [pc, #136]	@ (8000a5c <GPIO_PeriClockControl+0x124>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d106      	bne.n	80009e4 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 80009d6:	4b22      	ldr	r3, [pc, #136]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a21      	ldr	r2, [pc, #132]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 80009dc:	f023 0301 	bic.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009e2:	e035      	b.n	8000a50 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOB)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000a64 <GPIO_PeriClockControl+0x12c>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d106      	bne.n	80009fa <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 80009ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 80009f2:	f023 0304 	bic.w	r3, r3, #4
 80009f6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009f8:	e02a      	b.n	8000a50 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOC)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a1a      	ldr	r2, [pc, #104]	@ (8000a68 <GPIO_PeriClockControl+0x130>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d106      	bne.n	8000a10 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 8000a02:	4b17      	ldr	r3, [pc, #92]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a16      	ldr	r2, [pc, #88]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 8000a08:	f023 0308 	bic.w	r3, r3, #8
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a0e:	e01f      	b.n	8000a50 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOD)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a16      	ldr	r2, [pc, #88]	@ (8000a6c <GPIO_PeriClockControl+0x134>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d106      	bne.n	8000a26 <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 8000a18:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1c:	4a10      	ldr	r2, [pc, #64]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 8000a1e:	f023 0308 	bic.w	r3, r3, #8
 8000a22:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a24:	e014      	b.n	8000a50 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOE)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a11      	ldr	r2, [pc, #68]	@ (8000a70 <GPIO_PeriClockControl+0x138>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d106      	bne.n	8000a3c <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a0b      	ldr	r2, [pc, #44]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 8000a34:	f023 0310 	bic.w	r3, r3, #16
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a3a:	e009      	b.n	8000a50 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOH)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a74 <GPIO_PeriClockControl+0x13c>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d105      	bne.n	8000a50 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a48:	4a05      	ldr	r2, [pc, #20]	@ (8000a60 <GPIO_PeriClockControl+0x128>)
 8000a4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000a4e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40020000 	.word	0x40020000
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020400 	.word	0x40020400
 8000a68:	40020800 	.word	0x40020800
 8000a6c:	40020c00 	.word	0x40020c00
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40021c00 	.word	0x40021c00

08000a78 <GPIO_ReadFromInputPin>:
 * @return            - 0 or 1
 *
 * @Note              - none

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber){
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	460b      	mov	r3, r1
 8000a82:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value=(uint8_t)((pGPIOx->IDR>>PinNumber)&0x00000001);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	691a      	ldr	r2, [r3, #16]
 8000a88:	78fb      	ldrb	r3, [r7, #3]
 8000a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	73fb      	strb	r3, [r7, #15]
	return value;
 8000a96:	7bfb      	ldrb	r3, [r7, #15]

}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <RCC_GetPLLClock>:

static void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle);

static uint32_t RCC_GetPCLK1Value(void);

uint32_t RCC_GetPLLClock(void){
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
	return (uint32_t)100; //this just some random vale
 8000aa6:	2364      	movs	r3, #100	@ 0x64
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <I2C_GenerateStartCondition>:

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

	pI2Cx->CR1 |=(1<<I2C_CR1_START);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	601a      	str	r2, [r3, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr

08000ace <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |=(1<<I2C_CR1_STOP);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	601a      	str	r2, [r3, #0]
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &=~(1); //slave address+ r/nw bit
 8000afe:	78fb      	ldrb	r3, [r7, #3]
 8000b00:	f023 0301 	bic.w	r3, r3, #1
 8000b04:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000b06:	78fa      	ldrb	r2, [r7, #3]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	611a      	str	r2, [r3, #16]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr

08000b16 <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000b22:	78fb      	ldrb	r3, [r7, #3]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |=1; //slave address+ r/nw bit
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000b30:	78fa      	ldrb	r2, [r7, #3]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	611a      	str	r2, [r3, #16]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <I2C_CloseSendData>:

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	685a      	ldr	r2, [r3, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000b56:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000b66:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState= I2C_READY;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen=0;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]

}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <I2C_CloseReceiveData>:
static void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	685a      	ldr	r2, [r3, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000b9a:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000baa:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_EN)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7a5b      	ldrb	r3, [r3, #9]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d105      	bne.n	8000bd8 <I2C_CloseReceiveData+0x54>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,ENABLE);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f8e0 	bl	8000d98 <I2C_ManageAcking>
	}
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d01f      	beq.n	8000c36 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7f1b      	ldrb	r3, [r3, #28]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d112      	bne.n	8000c24 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a1b      	ldr	r3, [r3, #32]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d11f      	bne.n	8000c46 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 f8c3 	bl	8000d98 <I2C_ManageAcking>

				//CLEAR ADDR FLAG
				dummyRead=pI2CHandle->pI2Cx->SR1;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	60fb      	str	r3, [r7, #12]
				dummyRead=pI2CHandle->pI2Cx->SR2;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	60fb      	str	r3, [r7, #12]
		dummyRead=pI2CHandle->pI2Cx->SR2;
		(void)dummyRead;
	}


}
 8000c22:	e010      	b.n	8000c46 <I2C_ClearADDRFlag+0x66>
			dummyRead=pI2CHandle->pI2Cx->SR1;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	60fb      	str	r3, [r7, #12]
			dummyRead=pI2CHandle->pI2Cx->SR2;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	60fb      	str	r3, [r7, #12]
}
 8000c34:	e007      	b.n	8000c46 <I2C_ClearADDRFlag+0x66>
		dummyRead=pI2CHandle->pI2Cx->SR1;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	60fb      	str	r3, [r7, #12]
		dummyRead=pI2CHandle->pI2Cx->SR2;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	60fb      	str	r3, [r7, #12]
}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <I2C_MasterHandleRXNEInterrupt>:


static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
	//We have to do the data reception
	if(pI2CHandle->RxSize == 1)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a1b      	ldr	r3, [r3, #32]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d10b      	bne.n	8000c76 <I2C_MasterHandleRXNEInterrupt+0x28>
	{
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	691a      	ldr	r2, [r3, #16]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLen--;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	1e5a      	subs	r2, r3, #1
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	619a      	str	r2, [r3, #24]

	}


	if(pI2CHandle->RxSize > 1)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a1b      	ldr	r3, [r3, #32]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d91a      	bls.n	8000cb4 <I2C_MasterHandleRXNEInterrupt+0x66>
	{
		if(pI2CHandle->RxLen == 2)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d105      	bne.n	8000c92 <I2C_MasterHandleRXNEInterrupt+0x44>
		{
			//clear the ack bit
			I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 f883 	bl	8000d98 <I2C_ManageAcking>
		}

			//read DR
			*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	691a      	ldr	r2, [r3, #16]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	691b      	ldr	r3, [r3, #16]
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	701a      	strb	r2, [r3, #0]
			pI2CHandle->pRxBuffer++;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	691b      	ldr	r3, [r3, #16]
 8000ca4:	1c5a      	adds	r2, r3, #1
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	611a      	str	r2, [r3, #16]
			pI2CHandle->RxLen--;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	1e5a      	subs	r2, r3, #1
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxLen == 0 )
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d110      	bne.n	8000cde <I2C_MasterHandleRXNEInterrupt+0x90>
	{
		//close the I2C data reception and notify the application

		//1. generate the stop condition
		if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <I2C_MasterHandleRXNEInterrupt+0x82>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff feff 	bl	8000ace <I2C_GenerateStopCondition>

		//2 . Close the I2C rx
		I2C_CloseReceiveData(pI2CHandle);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ff57 	bl	8000b84 <I2C_CloseReceiveData>

		//3. Notify the application
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_RX_CMPLT);
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff fb75 	bl	80003c8 <I2C_ApplicationEventCallback>
	}
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <RCC_GetPCLK1Value>:

uint16_t AHB1_PreScaler[8]={2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4]={2,4,8,16};

static uint32_t RCC_GetPCLK1Value(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
	uint32_t pclk1,sysClk;
	uint8_t clksrc,temp,ahb1p,apb1p;
	//clock source info is present in the CFGR reg of RCC in bit positions 3 and 2
	clksrc = (RCC->CFGR>>2) &(0X02);
 8000cee:	4b25      	ldr	r3, [pc, #148]	@ (8000d84 <RCC_GetPCLK1Value+0x9c>)
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	089b      	lsrs	r3, r3, #2
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	727b      	strb	r3, [r7, #9]
	if(clksrc == 0){
 8000cfc:	7a7b      	ldrb	r3, [r7, #9]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <RCC_GetPCLK1Value+0x20>
		sysClk=16000000;
 8000d02:	4b21      	ldr	r3, [pc, #132]	@ (8000d88 <RCC_GetPCLK1Value+0xa0>)
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	e00b      	b.n	8000d20 <RCC_GetPCLK1Value+0x38>

	}
	else if(clksrc == 1){
 8000d08:	7a7b      	ldrb	r3, [r7, #9]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d102      	bne.n	8000d14 <RCC_GetPCLK1Value+0x2c>
		sysClk=8000000;
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d8c <RCC_GetPCLK1Value+0xa4>)
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	e005      	b.n	8000d20 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 2){
 8000d14:	7a7b      	ldrb	r3, [r7, #9]
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d102      	bne.n	8000d20 <RCC_GetPCLK1Value+0x38>
		sysClk=RCC_GetPLLClock();
 8000d1a:	f7ff fec2 	bl	8000aa2 <RCC_GetPLLClock>
 8000d1e:	60f8      	str	r0, [r7, #12]
	}

	//for ahb1
	temp=(RCC->CFGR>>4)&(0X0F);
 8000d20:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <RCC_GetPCLK1Value+0x9c>)
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	091b      	lsrs	r3, r3, #4
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	f003 030f 	and.w	r3, r3, #15
 8000d2c:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 8000d2e:	7a3b      	ldrb	r3, [r7, #8]
 8000d30:	2b07      	cmp	r3, #7
 8000d32:	d802      	bhi.n	8000d3a <RCC_GetPCLK1Value+0x52>
	{
		ahb1p= 1;
 8000d34:	2301      	movs	r3, #1
 8000d36:	72fb      	strb	r3, [r7, #11]
 8000d38:	e005      	b.n	8000d46 <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahb1p=AHB1_PreScaler[temp-8];
 8000d3a:	7a3b      	ldrb	r3, [r7, #8]
 8000d3c:	3b08      	subs	r3, #8
 8000d3e:	4a14      	ldr	r2, [pc, #80]	@ (8000d90 <RCC_GetPCLK1Value+0xa8>)
 8000d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d44:	72fb      	strb	r3, [r7, #11]
	}

	//for apb1
	temp=(RCC->CFGR>>10)&(0X07);
 8000d46:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <RCC_GetPCLK1Value+0x9c>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	0a9b      	lsrs	r3, r3, #10
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 8000d54:	7a3b      	ldrb	r3, [r7, #8]
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d802      	bhi.n	8000d60 <RCC_GetPCLK1Value+0x78>
	{
		apb1p= 1;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	72bb      	strb	r3, [r7, #10]
 8000d5e:	e004      	b.n	8000d6a <RCC_GetPCLK1Value+0x82>
	}
	else
	{
		apb1p=APB1_PreScaler[temp-4];
 8000d60:	7a3b      	ldrb	r3, [r7, #8]
 8000d62:	3b04      	subs	r3, #4
 8000d64:	4a0b      	ldr	r2, [pc, #44]	@ (8000d94 <RCC_GetPCLK1Value+0xac>)
 8000d66:	5cd3      	ldrb	r3, [r2, r3]
 8000d68:	72bb      	strb	r3, [r7, #10]
	}

	pclk1=(sysClk/ahb1p)/apb1p;
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d72:	7abb      	ldrb	r3, [r7, #10]
 8000d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d78:	607b      	str	r3, [r7, #4]
	return pclk1;
 8000d7a:	687b      	ldr	r3, [r7, #4]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40023800 	.word	0x40023800
 8000d88:	00f42400 	.word	0x00f42400
 8000d8c:	007a1200 	.word	0x007a1200
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000010 	.word	0x20000010

08000d98 <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_EN)
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d106      	bne.n	8000db8 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000db6:	e005      	b.n	8000dc4 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	601a      	str	r2, [r3, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
	...

08000dd0 <I2C_PeriClockControl>:
 * @return            - NONE
 *
 * @Note              -

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx,uint8_t EnorDi){
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d120      	bne.n	8000e24 <I2C_PeriClockControl+0x54>
		{
			if(pI2Cx == I2C1)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a22      	ldr	r2, [pc, #136]	@ (8000e70 <I2C_PeriClockControl+0xa0>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d106      	bne.n	8000df8 <I2C_PeriClockControl+0x28>
			{
				I2C1_PCLK_EN();
 8000dea:	4b22      	ldr	r3, [pc, #136]	@ (8000e74 <I2C_PeriClockControl+0xa4>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	4a21      	ldr	r2, [pc, #132]	@ (8000e74 <I2C_PeriClockControl+0xa4>)
 8000df0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000df4:	6413      	str	r3, [r2, #64]	@ 0x40
			{
				I2C3_PCLK_DI();
			}

		}
}
 8000df6:	e035      	b.n	8000e64 <I2C_PeriClockControl+0x94>
			else if (pI2Cx == I2C2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a1f      	ldr	r2, [pc, #124]	@ (8000e78 <I2C_PeriClockControl+0xa8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d106      	bne.n	8000e0e <I2C_PeriClockControl+0x3e>
				I2C2_PCLK_EN();
 8000e00:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <I2C_PeriClockControl+0xa4>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e04:	4a1b      	ldr	r2, [pc, #108]	@ (8000e74 <I2C_PeriClockControl+0xa4>)
 8000e06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e0a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e0c:	e02a      	b.n	8000e64 <I2C_PeriClockControl+0x94>
			else if (pI2Cx == I2C3)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a1a      	ldr	r2, [pc, #104]	@ (8000e7c <I2C_PeriClockControl+0xac>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d126      	bne.n	8000e64 <I2C_PeriClockControl+0x94>
				I2C3_PCLK_EN();
 8000e16:	4b17      	ldr	r3, [pc, #92]	@ (8000e74 <I2C_PeriClockControl+0xa4>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1a:	4a16      	ldr	r2, [pc, #88]	@ (8000e74 <I2C_PeriClockControl+0xa4>)
 8000e1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e20:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e22:	e01f      	b.n	8000e64 <I2C_PeriClockControl+0x94>
			if(pI2Cx == I2C1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a12      	ldr	r2, [pc, #72]	@ (8000e70 <I2C_PeriClockControl+0xa0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d106      	bne.n	8000e3a <I2C_PeriClockControl+0x6a>
				I2C1_PCLK_DI();
 8000e2c:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <I2C_PeriClockControl+0xa4>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e30:	4a10      	ldr	r2, [pc, #64]	@ (8000e74 <I2C_PeriClockControl+0xa4>)
 8000e32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000e36:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e38:	e014      	b.n	8000e64 <I2C_PeriClockControl+0x94>
			else if (pI2Cx == I2C2)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a0e      	ldr	r2, [pc, #56]	@ (8000e78 <I2C_PeriClockControl+0xa8>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d106      	bne.n	8000e50 <I2C_PeriClockControl+0x80>
				I2C2_PCLK_DI();
 8000e42:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <I2C_PeriClockControl+0xa4>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	4a0b      	ldr	r2, [pc, #44]	@ (8000e74 <I2C_PeriClockControl+0xa4>)
 8000e48:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000e4c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e4e:	e009      	b.n	8000e64 <I2C_PeriClockControl+0x94>
			else if (pI2Cx == I2C3)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <I2C_PeriClockControl+0xac>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d105      	bne.n	8000e64 <I2C_PeriClockControl+0x94>
				I2C3_PCLK_DI();
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <I2C_PeriClockControl+0xa4>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5c:	4a05      	ldr	r2, [pc, #20]	@ (8000e74 <I2C_PeriClockControl+0xa4>)
 8000e5e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000e62:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40005400 	.word	0x40005400
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40005800 	.word	0x40005800
 8000e7c:	40005c00 	.word	0x40005c00

08000e80 <I2C_Init>:
 * @return            - NONE
 *
 * @Note              -

 */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	uint8_t tempreg =0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	73fb      	strb	r3, [r7, #15]

	//enable clock

	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2101      	movs	r1, #1
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff9c 	bl	8000dd0 <I2C_PeriClockControl>
	//program the ACK
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl<<10;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7a5b      	ldrb	r3, [r3, #9]
 8000e9c:	029b      	lsls	r3, r3, #10
 8000e9e:	b25a      	sxtb	r2, r3
 8000ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	73fb      	strb	r3, [r7, #15]
	pI2CHandle->pI2Cx->CR1=tempreg;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	7bfa      	ldrb	r2, [r7, #15]
 8000eb0:	601a      	str	r2, [r3, #0]

	//configure freq field of cr2
	//in our case function returns 16000000 so we devide by 100000 to get just 16
	tempreg=0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73fb      	strb	r3, [r7, #15]
	tempreg |= RCC_GetPCLK1Value() /1000000U;
 8000eb6:	f7ff ff17 	bl	8000ce8 <RCC_GetPCLK1Value>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4a48      	ldr	r2, [pc, #288]	@ (8000fe0 <I2C_Init+0x160>)
 8000ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec2:	0c9b      	lsrs	r3, r3, #18
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	73fb      	strb	r3, [r7, #15]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3f);
 8000ecc:	7bfa      	ldrb	r2, [r7, #15]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000ed6:	605a      	str	r2, [r3, #4]

	//storing slave address in OAR register
	//left shifted by one to not include the 0th bit which is used in 10 bit addressing mode
	tempreg=0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress<<1;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7a1b      	ldrb	r3, [r3, #8]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	b25a      	sxtb	r2, r3
 8000ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	b25b      	sxtb	r3, r3
 8000eec:	73fb      	strb	r3, [r7, #15]
	//the reference manual tells that the software has to keep this bit high
	tempreg |=(1<<14);
	pI2CHandle->pI2Cx->OAR1 =tempreg;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	609a      	str	r2, [r3, #8]

	//ccr calculation
	uint16_t ccrValue = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	81bb      	strh	r3, [r7, #12]
	tempreg=0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <=I2C_SCL_SPEED_SM)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	4a38      	ldr	r2, [pc, #224]	@ (8000fe4 <I2C_Init+0x164>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d810      	bhi.n	8000f2a <I2C_Init+0xaa>
	{
		//mode is standard mode
		ccrValue=RCC_GetPCLK1Value()/(2* pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000f08:	f7ff feee 	bl	8000ce8 <RCC_GetPCLK1Value>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f18:	81bb      	strh	r3, [r7, #12]
		tempreg |=(ccrValue & 0xFFF);
 8000f1a:	89bb      	ldrh	r3, [r7, #12]
 8000f1c:	b25a      	sxtb	r2, r3
 8000f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e02c      	b.n	8000f84 <I2C_Init+0x104>
	{
		//mode is fast mode
		//1.Set the mode to fast mode in bit15
		tempreg |=(1<<15);
		//configure duty cycle
		tempreg |=(pI2CHandle->I2C_Config.I2C_FMDutyCycle <<14);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7a9b      	ldrb	r3, [r3, #10]
 8000f2e:	039b      	lsls	r3, r3, #14
 8000f30:	b25a      	sxtb	r2, r3
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	73fb      	strb	r3, [r7, #15]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7a9b      	ldrb	r3, [r3, #10]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10b      	bne.n	8000f5c <I2C_Init+0xdc>
		{
			ccrValue=RCC_GetPCLK1Value()/(5* pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000f44:	f7ff fed0 	bl	8000ce8 <RCC_GetPCLK1Value>
 8000f48:	4601      	mov	r1, r0
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f58:	81bb      	strh	r3, [r7, #12]
 8000f5a:	e00c      	b.n	8000f76 <I2C_Init+0xf6>
		}
		else
		{
			ccrValue=RCC_GetPCLK1Value()/(25* pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000f5c:	f7ff fec4 	bl	8000ce8 <RCC_GetPCLK1Value>
 8000f60:	4601      	mov	r1, r0
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	4613      	mov	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	009a      	lsls	r2, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f74:	81bb      	strh	r3, [r7, #12]
		}

		tempreg |=(ccrValue & 0xFFF);
 8000f76:	89bb      	ldrh	r3, [r7, #12]
 8000f78:	b25a      	sxtb	r2, r3
 8000f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b25b      	sxtb	r3, r3
 8000f82:	73fb      	strb	r3, [r7, #15]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	7bfa      	ldrb	r2, [r7, #15]
 8000f8a:	61da      	str	r2, [r3, #28]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <=I2C_SCL_SPEED_SM)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	4a14      	ldr	r2, [pc, #80]	@ (8000fe4 <I2C_Init+0x164>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d80a      	bhi.n	8000fac <I2C_Init+0x12c>
	{
		//mode is standard mode
		//refer trsise reg in RM
		tempreg = (uint8_t)(RCC_GetPCLK1Value()/1000000U)+1;
 8000f96:	f7ff fea7 	bl	8000ce8 <RCC_GetPCLK1Value>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a10      	ldr	r2, [pc, #64]	@ (8000fe0 <I2C_Init+0x160>)
 8000f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa2:	0c9b      	lsrs	r3, r3, #18
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	e00e      	b.n	8000fca <I2C_Init+0x14a>
	}
	else
	{
		//mode is fast mode
		tempreg = (uint8_t)((RCC_GetPCLK1Value()*300)/1000000000U)+1;
 8000fac:	f7ff fe9c 	bl	8000ce8 <RCC_GetPCLK1Value>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000fb6:	fb02 f303 	mul.w	r3, r2, r3
 8000fba:	0a5b      	lsrs	r3, r3, #9
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <I2C_Init+0x168>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	09db      	lsrs	r3, r3, #7
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000fca:	7bfa      	ldrb	r2, [r7, #15]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000fd4:	621a      	str	r2, [r3, #32]


}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	431bde83 	.word	0x431bde83
 8000fe4:	000186a0 	.word	0x000186a0
 8000fe8:	00044b83 	.word	0x00044b83

08000fec <I2C_MasterHandleTXEInterrupt>:
	}

}

static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle )
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

	if(pI2CHandle->TxLen > 0)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00f      	beq.n	800101c <I2C_MasterHandleTXEInterrupt+0x30>
	{
		//1. load the data in to DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	781a      	ldrb	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	611a      	str	r2, [r3, #16]

		//2. decrement the TxLen
		pI2CHandle->TxLen--;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	1e5a      	subs	r2, r3, #1
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	615a      	str	r2, [r3, #20]

		//3. Increment the buffer address
		pI2CHandle->pTxBuffer++;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	60da      	str	r2, [r3, #12]

	}

}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <I2C_MasterSendDataIT>:
 *
 * @Note              -

 */
uint8_t I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer,uint8_t Len,uint8_t SlaveAddr,uint8_t SR)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	4611      	mov	r1, r2
 8001032:	461a      	mov	r2, r3
 8001034:	460b      	mov	r3, r1
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	4613      	mov	r3, r2
 800103a:	71bb      	strb	r3, [r7, #6]
	uint8_t busystate = pI2CHandle->TxRxState;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	7f1b      	ldrb	r3, [r3, #28]
 8001040:	75fb      	strb	r3, [r7, #23]

		if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	2b02      	cmp	r3, #2
 8001046:	d030      	beq.n	80010aa <I2C_MasterSendDataIT+0x84>
 8001048:	7dfb      	ldrb	r3, [r7, #23]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d02d      	beq.n	80010aa <I2C_MasterSendDataIT+0x84>
		{
			pI2CHandle->pTxBuffer = pTxbuffer;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	60da      	str	r2, [r3, #12]
			pI2CHandle->TxLen = Len;
 8001054:	79fa      	ldrb	r2, [r7, #7]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	615a      	str	r2, [r3, #20]
			pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2202      	movs	r2, #2
 800105e:	771a      	strb	r2, [r3, #28]
			pI2CHandle->DevAddr = SlaveAddr;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	79ba      	ldrb	r2, [r7, #6]
 8001064:	775a      	strb	r2, [r3, #29]
			pI2CHandle->Sr = SR;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f897 2020 	ldrb.w	r2, [r7, #32]
 800106c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

			//Implement code to Generate START Condition
			I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fd1b 	bl	8000ab0 <I2C_GenerateStartCondition>

			//Implement the code to enable ITBUFEN Control Bit
			pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001088:	605a      	str	r2, [r3, #4]

			//Implement the code to enable ITEVFEN Control Bit
			pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001098:	605a      	str	r2, [r3, #4]

			//Implement the code to enable ITERREN Control Bit
			pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80010a8:	605a      	str	r2, [r3, #4]

		}

		return busystate;
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <I2C_MasterReceiveDataIT>:
 *
 * @Note              -

 */
uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pRxbuffer,uint8_t Len,uint8_t SlaveAddr,uint8_t SR)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	4611      	mov	r1, r2
 80010c0:	461a      	mov	r2, r3
 80010c2:	460b      	mov	r3, r1
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	4613      	mov	r3, r2
 80010c8:	71bb      	strb	r3, [r7, #6]
	uint8_t busystate = pI2CHandle->TxRxState;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	7f1b      	ldrb	r3, [r3, #28]
 80010ce:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d033      	beq.n	800113e <I2C_MasterReceiveDataIT+0x8a>
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d030      	beq.n	800113e <I2C_MasterReceiveDataIT+0x8a>
	{
		pI2CHandle->pRxBuffer = pRxbuffer;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen = Len;
 80010e2:	79fa      	ldrb	r2, [r7, #7]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	619a      	str	r2, [r3, #24]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2201      	movs	r2, #1
 80010ec:	771a      	strb	r2, [r3, #28]
		pI2CHandle->RxSize = Len; //Rxsize is used in the ISR code to manage the data reception
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	621a      	str	r2, [r3, #32]
		pI2CHandle->DevAddr = SlaveAddr;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	79ba      	ldrb	r2, [r7, #6]
 80010f8:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = SR;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001100:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fcd1 	bl	8000ab0 <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800111c:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800112c:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800113c:	605a      	str	r2, [r3, #4]

	}

	return busystate;
 800113e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <I2C_IRQInterruptConfig>:

void I2C_IRQInterruptConfig(uint8_t IRQNumber,uint8_t EnorDi)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	460a      	mov	r2, r1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	4613      	mov	r3, r2
 8001156:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8001158:	79bb      	ldrb	r3, [r7, #6]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d133      	bne.n	80011c6 <I2C_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b1f      	cmp	r3, #31
 8001162:	d80a      	bhi.n	800117a <I2C_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8001164:	4b34      	ldr	r3, [pc, #208]	@ (8001238 <I2C_IRQInterruptConfig+0xf0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	79fa      	ldrb	r2, [r7, #7]
 800116a:	2101      	movs	r1, #1
 800116c:	fa01 f202 	lsl.w	r2, r1, r2
 8001170:	4611      	mov	r1, r2
 8001172:	4a31      	ldr	r2, [pc, #196]	@ (8001238 <I2C_IRQInterruptConfig+0xf0>)
 8001174:	430b      	orrs	r3, r1
 8001176:	6013      	str	r3, [r2, #0]
		{
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}
}
 8001178:	e059      	b.n	800122e <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2b1f      	cmp	r3, #31
 800117e:	d90f      	bls.n	80011a0 <I2C_IRQInterruptConfig+0x58>
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b3f      	cmp	r3, #63	@ 0x3f
 8001184:	d80c      	bhi.n	80011a0 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8001186:	4b2d      	ldr	r3, [pc, #180]	@ (800123c <I2C_IRQInterruptConfig+0xf4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	f002 021f 	and.w	r2, r2, #31
 8001190:	2101      	movs	r1, #1
 8001192:	fa01 f202 	lsl.w	r2, r1, r2
 8001196:	4611      	mov	r1, r2
 8001198:	4a28      	ldr	r2, [pc, #160]	@ (800123c <I2C_IRQInterruptConfig+0xf4>)
 800119a:	430b      	orrs	r3, r1
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e046      	b.n	800122e <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80011a4:	d943      	bls.n	800122e <I2C_IRQInterruptConfig+0xe6>
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b5f      	cmp	r3, #95	@ 0x5f
 80011aa:	d840      	bhi.n	800122e <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 80011ac:	4b24      	ldr	r3, [pc, #144]	@ (8001240 <I2C_IRQInterruptConfig+0xf8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	79fa      	ldrb	r2, [r7, #7]
 80011b2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80011b6:	2101      	movs	r1, #1
 80011b8:	fa01 f202 	lsl.w	r2, r1, r2
 80011bc:	4611      	mov	r1, r2
 80011be:	4a20      	ldr	r2, [pc, #128]	@ (8001240 <I2C_IRQInterruptConfig+0xf8>)
 80011c0:	430b      	orrs	r3, r1
 80011c2:	6013      	str	r3, [r2, #0]
}
 80011c4:	e033      	b.n	800122e <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b1f      	cmp	r3, #31
 80011ca:	d80a      	bhi.n	80011e2 <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 80011cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <I2C_IRQInterruptConfig+0xfc>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	79fa      	ldrb	r2, [r7, #7]
 80011d2:	2101      	movs	r1, #1
 80011d4:	fa01 f202 	lsl.w	r2, r1, r2
 80011d8:	4611      	mov	r1, r2
 80011da:	4a1a      	ldr	r2, [pc, #104]	@ (8001244 <I2C_IRQInterruptConfig+0xfc>)
 80011dc:	430b      	orrs	r3, r1
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	e025      	b.n	800122e <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2b1f      	cmp	r3, #31
 80011e6:	d90f      	bls.n	8001208 <I2C_IRQInterruptConfig+0xc0>
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80011ec:	d80c      	bhi.n	8001208 <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 80011ee:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <I2C_IRQInterruptConfig+0x100>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	79fa      	ldrb	r2, [r7, #7]
 80011f4:	f002 021f 	and.w	r2, r2, #31
 80011f8:	2101      	movs	r1, #1
 80011fa:	fa01 f202 	lsl.w	r2, r1, r2
 80011fe:	4611      	mov	r1, r2
 8001200:	4a11      	ldr	r2, [pc, #68]	@ (8001248 <I2C_IRQInterruptConfig+0x100>)
 8001202:	430b      	orrs	r3, r1
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e012      	b.n	800122e <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	2b05      	cmp	r3, #5
 800120c:	d90f      	bls.n	800122e <I2C_IRQInterruptConfig+0xe6>
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	2b5f      	cmp	r3, #95	@ 0x5f
 8001212:	d80c      	bhi.n	800122e <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8001214:	4b0d      	ldr	r3, [pc, #52]	@ (800124c <I2C_IRQInterruptConfig+0x104>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	79fa      	ldrb	r2, [r7, #7]
 800121a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800121e:	2101      	movs	r1, #1
 8001220:	fa01 f202 	lsl.w	r2, r1, r2
 8001224:	4611      	mov	r1, r2
 8001226:	4a09      	ldr	r2, [pc, #36]	@ (800124c <I2C_IRQInterruptConfig+0x104>)
 8001228:	430b      	orrs	r3, r1
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	e7ff      	b.n	800122e <I2C_IRQInterruptConfig+0xe6>
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000e104 	.word	0xe000e104
 8001240:	e000e10c 	.word	0xe000e10c
 8001244:	e000e180 	.word	0xe000e180
 8001248:	e000e184 	.word	0xe000e184
 800124c:	e000e18c 	.word	0xe000e18c

08001250 <I2C_PeripheralControl>:
 *
 * @Note              -

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d106      	bne.n	8001270 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f043 0201 	orr.w	r2, r3, #1
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 800126e:	e005      	b.n	800127c <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f023 0201 	bic.w	r2, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	601a      	str	r2, [r3, #0]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <I2C_EV_IRQHandling>:
 *
 * @Note              -

 */
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
	//Interrupt handling for both master and slave mode of a device

	uint32_t temp1,temp2,temp3;

	//confirming if the control bit for enabling event interrupt on I2C is enabled
	temp1   = pI2CHandle->pI2Cx->CR2 & ( 1 << I2C_CR2_ITEVTEN) ;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001298:	617b      	str	r3, [r7, #20]
	temp2=pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012a4:	613b      	str	r3, [r7, #16]

	//check if start bit is set to see if start condition is generated
	temp3 = pI2CHandle->pI2Cx->SR1 & (1<<I2C_SR1_SB);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]

	//1. Handle For interrupt generated by SB event
	//	Note : SB flag is only applicable in Master mode
	if(temp1 && temp3)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d01b      	beq.n	80012f0 <I2C_EV_IRQHandling+0x6a>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d018      	beq.n	80012f0 <I2C_EV_IRQHandling+0x6a>
	{
		//Interrupt is generated because of SB event
		//this will not be set in slave mode
		//in this block lets execute address phase
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7f1b      	ldrb	r3, [r3, #28]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d108      	bne.n	80012d8 <I2C_EV_IRQHandling+0x52>
		{
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,pI2CHandle->DevAddr);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7f5b      	ldrb	r3, [r3, #29]
 80012ce:	4619      	mov	r1, r3
 80012d0:	4610      	mov	r0, r2
 80012d2:	f7ff fc0b 	bl	8000aec <I2C_ExecuteAddressPhaseWrite>
 80012d6:	e00b      	b.n	80012f0 <I2C_EV_IRQHandling+0x6a>
		}
		else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	7f1b      	ldrb	r3, [r3, #28]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d107      	bne.n	80012f0 <I2C_EV_IRQHandling+0x6a>
		{
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,pI2CHandle->DevAddr);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	7f5b      	ldrb	r3, [r3, #29]
 80012e8:	4619      	mov	r1, r3
 80012ea:	4610      	mov	r0, r2
 80012ec:	f7ff fc13 	bl	8000b16 <I2C_ExecuteAddressPhaseRead>
	}

	//2. Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode   : Address matched with own address
	temp3 = pI2CHandle->pI2Cx->SR1 & (1<<I2C_SR1_ADDR);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp3)
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d005      	beq.n	800130e <I2C_EV_IRQHandling+0x88>
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <I2C_EV_IRQHandling+0x88>
	{
		//Interrupt is generated because of ADDR event
		I2C_ClearADDRFlag(pI2CHandle);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fc69 	bl	8000be0 <I2C_ClearADDRFlag>
	}

	//3. Handle For interrupt generated by BTF(Byte Transfer Finished) event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1<<I2C_SR1_BTF);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp3)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d022      	beq.n	8001366 <I2C_EV_IRQHandling+0xe0>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d01f      	beq.n	8001366 <I2C_EV_IRQHandling+0xe0>
	{
		//Interrupt is generated because of BTF event
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	7f1b      	ldrb	r3, [r3, #28]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d11b      	bne.n	8001366 <I2C_EV_IRQHandling+0xe0>
		{
			if(pI2CHandle->pI2Cx->SR1 & (1<<I2C_SR1_TXE))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001338:	2b00      	cmp	r3, #0
 800133a:	d014      	beq.n	8001366 <I2C_EV_IRQHandling+0xe0>
			{
				//BTF and TXE both are set and it is an indication to close the communication
				if(pI2CHandle->TxLen==0)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d110      	bne.n	8001366 <I2C_EV_IRQHandling+0xe0>
				{
					//1.generate stop condition
					if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800134a:	2b00      	cmp	r3, #0
 800134c:	d104      	bne.n	8001358 <I2C_EV_IRQHandling+0xd2>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fbbb 	bl	8000ace <I2C_GenerateStopCondition>

					//2. reset all the members of handle structure
					I2C_CloseSendData(pI2CHandle);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff fbf1 	bl	8000b40 <I2C_CloseSendData>

					//notify application about transmisson complete
					I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_TX_CMPLT);
 800135e:	2100      	movs	r1, #0
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff f831 	bl	80003c8 <I2C_ApplicationEventCallback>
		}
	}

	//4. Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode . For master this flag will never be set
	temp3 = pI2CHandle->pI2Cx->SR1 & (1<<I2C_SR1_STOPF);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	f003 0310 	and.w	r3, r3, #16
 8001370:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp3)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00c      	beq.n	8001392 <I2C_EV_IRQHandling+0x10c>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d009      	beq.n	8001392 <I2C_EV_IRQHandling+0x10c>
	{
		//Interrupt is generated because of STOPF event
		//cleare the STOPF(i.e., read SR1 and write to cr1)
		//SR1 is already read into temp3 variable
		pI2CHandle->pI2Cx->DR |= 0x0000;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6912      	ldr	r2, [r2, #16]
 8001388:	611a      	str	r2, [r3, #16]
		//notify application about Stop is detected by slave
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_STOP);
 800138a:	2102      	movs	r1, #2
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff f81b 	bl	80003c8 <I2C_ApplicationEventCallback>
	}

	//5. Handle For interrupt generated by TXE event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1<<I2C_SR1_TXE);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800139c:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp2 && temp3)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d01f      	beq.n	80013e4 <I2C_EV_IRQHandling+0x15e>
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d01c      	beq.n	80013e4 <I2C_EV_IRQHandling+0x15e>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d019      	beq.n	80013e4 <I2C_EV_IRQHandling+0x15e>
	{
		//Interrupt is generated because of TXE event

		//check for device mode
		if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d007      	beq.n	80013ce <I2C_EV_IRQHandling+0x148>
		{
			//TXE flag is set
			//We have to do the data transmission
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7f1b      	ldrb	r3, [r3, #28]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d10e      	bne.n	80013e4 <I2C_EV_IRQHandling+0x15e>
			{
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fe10 	bl	8000fec <I2C_MasterHandleTXEInterrupt>
 80013cc:	e00a      	b.n	80013e4 <I2C_EV_IRQHandling+0x15e>

		else
		{
			//slave
			//make sure that the slave is really in transmitter mode
			if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_TRA))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <I2C_EV_IRQHandling+0x15e>
			{
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_REQ);
 80013dc:	2108      	movs	r1, #8
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7fe fff2 	bl	80003c8 <I2C_ApplicationEventCallback>
			}
		}
	}

	//6. Handle For interrupt generated by RXNE event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1<<I2C_SR1_RXNE);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013ee:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp2 && temp3)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d01f      	beq.n	8001436 <I2C_EV_IRQHandling+0x1b0>
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d01c      	beq.n	8001436 <I2C_EV_IRQHandling+0x1b0>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d019      	beq.n	8001436 <I2C_EV_IRQHandling+0x1b0>
	{
		//Check for device mode
		if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d007      	beq.n	8001420 <I2C_EV_IRQHandling+0x19a>
		{

			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	7f1b      	ldrb	r3, [r3, #28]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d10e      	bne.n	8001436 <I2C_EV_IRQHandling+0x1b0>
			{
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff fc18 	bl	8000c4e <I2C_MasterHandleRXNEInterrupt>
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_RCV);
			}
		}
	}

}
 800141e:	e00a      	b.n	8001436 <I2C_EV_IRQHandling+0x1b0>
			if(!(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_TRA)))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	2b00      	cmp	r3, #0
 800142c:	d103      	bne.n	8001436 <I2C_EV_IRQHandling+0x1b0>
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_RCV);
 800142e:	2109      	movs	r1, #9
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7fe ffc9 	bl	80003c8 <I2C_ApplicationEventCallback>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <I2C_ER_IRQHandling>:
 *
 * @Note              -

 */
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b084      	sub	sp, #16
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
	uint32_t temp1,temp2;

	//Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001450:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800145c:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00e      	beq.n	8001482 <I2C_ER_IRQHandling+0x44>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00b      	beq.n	8001482 <I2C_ER_IRQHandling+0x44>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	695a      	ldr	r2, [r3, #20]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001478:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 800147a:	2103      	movs	r1, #3
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7fe ffa3 	bl	80003c8 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800148c:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00e      	beq.n	80014b2 <I2C_ER_IRQHandling+0x74>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00b      	beq.n	80014b2 <I2C_ER_IRQHandling+0x74>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	695a      	ldr	r2, [r3, #20]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80014a8:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 80014aa:	2104      	movs	r1, #4
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7fe ff8b 	bl	80003c8 <I2C_ApplicationEventCallback>

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014bc:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00e      	beq.n	80014e2 <I2C_ER_IRQHandling+0xa4>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00b      	beq.n	80014e2 <I2C_ER_IRQHandling+0xa4>
	{
		//This is ACK failure error

		//Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	695a      	ldr	r2, [r3, #20]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014d8:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 80014da:	2105      	movs	r1, #5
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7fe ff73 	bl	80003c8 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014ec:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00e      	beq.n	8001512 <I2C_ER_IRQHandling+0xd4>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00b      	beq.n	8001512 <I2C_ER_IRQHandling+0xd4>
	{
		//This is Overrun/underrun

		//Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	695a      	ldr	r2, [r3, #20]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001508:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 800150a:	2106      	movs	r1, #6
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7fe ff5b 	bl	80003c8 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800151c:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00e      	beq.n	8001542 <I2C_ER_IRQHandling+0x104>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <I2C_ER_IRQHandling+0x104>
	{
		//This is Time out error

		//Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	695a      	ldr	r2, [r3, #20]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001538:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 800153a:	2107      	movs	r1, #7
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7fe ff43 	bl	80003c8 <I2C_ApplicationEventCallback>
	}
}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <std>:
 800154c:	2300      	movs	r3, #0
 800154e:	b510      	push	{r4, lr}
 8001550:	4604      	mov	r4, r0
 8001552:	e9c0 3300 	strd	r3, r3, [r0]
 8001556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800155a:	6083      	str	r3, [r0, #8]
 800155c:	8181      	strh	r1, [r0, #12]
 800155e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001560:	81c2      	strh	r2, [r0, #14]
 8001562:	6183      	str	r3, [r0, #24]
 8001564:	4619      	mov	r1, r3
 8001566:	2208      	movs	r2, #8
 8001568:	305c      	adds	r0, #92	@ 0x5c
 800156a:	f000 f9e7 	bl	800193c <memset>
 800156e:	4b0d      	ldr	r3, [pc, #52]	@ (80015a4 <std+0x58>)
 8001570:	6263      	str	r3, [r4, #36]	@ 0x24
 8001572:	4b0d      	ldr	r3, [pc, #52]	@ (80015a8 <std+0x5c>)
 8001574:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001576:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <std+0x60>)
 8001578:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800157a:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <std+0x64>)
 800157c:	6323      	str	r3, [r4, #48]	@ 0x30
 800157e:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <std+0x68>)
 8001580:	6224      	str	r4, [r4, #32]
 8001582:	429c      	cmp	r4, r3
 8001584:	d006      	beq.n	8001594 <std+0x48>
 8001586:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800158a:	4294      	cmp	r4, r2
 800158c:	d002      	beq.n	8001594 <std+0x48>
 800158e:	33d0      	adds	r3, #208	@ 0xd0
 8001590:	429c      	cmp	r4, r3
 8001592:	d105      	bne.n	80015a0 <std+0x54>
 8001594:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800159c:	f000 ba46 	b.w	8001a2c <__retarget_lock_init_recursive>
 80015a0:	bd10      	pop	{r4, pc}
 80015a2:	bf00      	nop
 80015a4:	0800178d 	.word	0x0800178d
 80015a8:	080017af 	.word	0x080017af
 80015ac:	080017e7 	.word	0x080017e7
 80015b0:	0800180b 	.word	0x0800180b
 80015b4:	200000b8 	.word	0x200000b8

080015b8 <stdio_exit_handler>:
 80015b8:	4a02      	ldr	r2, [pc, #8]	@ (80015c4 <stdio_exit_handler+0xc>)
 80015ba:	4903      	ldr	r1, [pc, #12]	@ (80015c8 <stdio_exit_handler+0x10>)
 80015bc:	4803      	ldr	r0, [pc, #12]	@ (80015cc <stdio_exit_handler+0x14>)
 80015be:	f000 b869 	b.w	8001694 <_fwalk_sglue>
 80015c2:	bf00      	nop
 80015c4:	20000014 	.word	0x20000014
 80015c8:	08001d25 	.word	0x08001d25
 80015cc:	20000024 	.word	0x20000024

080015d0 <cleanup_stdio>:
 80015d0:	6841      	ldr	r1, [r0, #4]
 80015d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <cleanup_stdio+0x34>)
 80015d4:	4299      	cmp	r1, r3
 80015d6:	b510      	push	{r4, lr}
 80015d8:	4604      	mov	r4, r0
 80015da:	d001      	beq.n	80015e0 <cleanup_stdio+0x10>
 80015dc:	f000 fba2 	bl	8001d24 <_fflush_r>
 80015e0:	68a1      	ldr	r1, [r4, #8]
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <cleanup_stdio+0x38>)
 80015e4:	4299      	cmp	r1, r3
 80015e6:	d002      	beq.n	80015ee <cleanup_stdio+0x1e>
 80015e8:	4620      	mov	r0, r4
 80015ea:	f000 fb9b 	bl	8001d24 <_fflush_r>
 80015ee:	68e1      	ldr	r1, [r4, #12]
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <cleanup_stdio+0x3c>)
 80015f2:	4299      	cmp	r1, r3
 80015f4:	d004      	beq.n	8001600 <cleanup_stdio+0x30>
 80015f6:	4620      	mov	r0, r4
 80015f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015fc:	f000 bb92 	b.w	8001d24 <_fflush_r>
 8001600:	bd10      	pop	{r4, pc}
 8001602:	bf00      	nop
 8001604:	200000b8 	.word	0x200000b8
 8001608:	20000120 	.word	0x20000120
 800160c:	20000188 	.word	0x20000188

08001610 <global_stdio_init.part.0>:
 8001610:	b510      	push	{r4, lr}
 8001612:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <global_stdio_init.part.0+0x30>)
 8001614:	4c0b      	ldr	r4, [pc, #44]	@ (8001644 <global_stdio_init.part.0+0x34>)
 8001616:	4a0c      	ldr	r2, [pc, #48]	@ (8001648 <global_stdio_init.part.0+0x38>)
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	4620      	mov	r0, r4
 800161c:	2200      	movs	r2, #0
 800161e:	2104      	movs	r1, #4
 8001620:	f7ff ff94 	bl	800154c <std>
 8001624:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001628:	2201      	movs	r2, #1
 800162a:	2109      	movs	r1, #9
 800162c:	f7ff ff8e 	bl	800154c <std>
 8001630:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001634:	2202      	movs	r2, #2
 8001636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800163a:	2112      	movs	r1, #18
 800163c:	f7ff bf86 	b.w	800154c <std>
 8001640:	200001f0 	.word	0x200001f0
 8001644:	200000b8 	.word	0x200000b8
 8001648:	080015b9 	.word	0x080015b9

0800164c <__sfp_lock_acquire>:
 800164c:	4801      	ldr	r0, [pc, #4]	@ (8001654 <__sfp_lock_acquire+0x8>)
 800164e:	f000 b9ee 	b.w	8001a2e <__retarget_lock_acquire_recursive>
 8001652:	bf00      	nop
 8001654:	200001f9 	.word	0x200001f9

08001658 <__sfp_lock_release>:
 8001658:	4801      	ldr	r0, [pc, #4]	@ (8001660 <__sfp_lock_release+0x8>)
 800165a:	f000 b9e9 	b.w	8001a30 <__retarget_lock_release_recursive>
 800165e:	bf00      	nop
 8001660:	200001f9 	.word	0x200001f9

08001664 <__sinit>:
 8001664:	b510      	push	{r4, lr}
 8001666:	4604      	mov	r4, r0
 8001668:	f7ff fff0 	bl	800164c <__sfp_lock_acquire>
 800166c:	6a23      	ldr	r3, [r4, #32]
 800166e:	b11b      	cbz	r3, 8001678 <__sinit+0x14>
 8001670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001674:	f7ff bff0 	b.w	8001658 <__sfp_lock_release>
 8001678:	4b04      	ldr	r3, [pc, #16]	@ (800168c <__sinit+0x28>)
 800167a:	6223      	str	r3, [r4, #32]
 800167c:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <__sinit+0x2c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f5      	bne.n	8001670 <__sinit+0xc>
 8001684:	f7ff ffc4 	bl	8001610 <global_stdio_init.part.0>
 8001688:	e7f2      	b.n	8001670 <__sinit+0xc>
 800168a:	bf00      	nop
 800168c:	080015d1 	.word	0x080015d1
 8001690:	200001f0 	.word	0x200001f0

08001694 <_fwalk_sglue>:
 8001694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001698:	4607      	mov	r7, r0
 800169a:	4688      	mov	r8, r1
 800169c:	4614      	mov	r4, r2
 800169e:	2600      	movs	r6, #0
 80016a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80016a4:	f1b9 0901 	subs.w	r9, r9, #1
 80016a8:	d505      	bpl.n	80016b6 <_fwalk_sglue+0x22>
 80016aa:	6824      	ldr	r4, [r4, #0]
 80016ac:	2c00      	cmp	r4, #0
 80016ae:	d1f7      	bne.n	80016a0 <_fwalk_sglue+0xc>
 80016b0:	4630      	mov	r0, r6
 80016b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016b6:	89ab      	ldrh	r3, [r5, #12]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d907      	bls.n	80016cc <_fwalk_sglue+0x38>
 80016bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80016c0:	3301      	adds	r3, #1
 80016c2:	d003      	beq.n	80016cc <_fwalk_sglue+0x38>
 80016c4:	4629      	mov	r1, r5
 80016c6:	4638      	mov	r0, r7
 80016c8:	47c0      	blx	r8
 80016ca:	4306      	orrs	r6, r0
 80016cc:	3568      	adds	r5, #104	@ 0x68
 80016ce:	e7e9      	b.n	80016a4 <_fwalk_sglue+0x10>

080016d0 <_puts_r>:
 80016d0:	6a03      	ldr	r3, [r0, #32]
 80016d2:	b570      	push	{r4, r5, r6, lr}
 80016d4:	6884      	ldr	r4, [r0, #8]
 80016d6:	4605      	mov	r5, r0
 80016d8:	460e      	mov	r6, r1
 80016da:	b90b      	cbnz	r3, 80016e0 <_puts_r+0x10>
 80016dc:	f7ff ffc2 	bl	8001664 <__sinit>
 80016e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80016e2:	07db      	lsls	r3, r3, #31
 80016e4:	d405      	bmi.n	80016f2 <_puts_r+0x22>
 80016e6:	89a3      	ldrh	r3, [r4, #12]
 80016e8:	0598      	lsls	r0, r3, #22
 80016ea:	d402      	bmi.n	80016f2 <_puts_r+0x22>
 80016ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80016ee:	f000 f99e 	bl	8001a2e <__retarget_lock_acquire_recursive>
 80016f2:	89a3      	ldrh	r3, [r4, #12]
 80016f4:	0719      	lsls	r1, r3, #28
 80016f6:	d502      	bpl.n	80016fe <_puts_r+0x2e>
 80016f8:	6923      	ldr	r3, [r4, #16]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d135      	bne.n	800176a <_puts_r+0x9a>
 80016fe:	4621      	mov	r1, r4
 8001700:	4628      	mov	r0, r5
 8001702:	f000 f8c5 	bl	8001890 <__swsetup_r>
 8001706:	b380      	cbz	r0, 800176a <_puts_r+0x9a>
 8001708:	f04f 35ff 	mov.w	r5, #4294967295
 800170c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800170e:	07da      	lsls	r2, r3, #31
 8001710:	d405      	bmi.n	800171e <_puts_r+0x4e>
 8001712:	89a3      	ldrh	r3, [r4, #12]
 8001714:	059b      	lsls	r3, r3, #22
 8001716:	d402      	bmi.n	800171e <_puts_r+0x4e>
 8001718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800171a:	f000 f989 	bl	8001a30 <__retarget_lock_release_recursive>
 800171e:	4628      	mov	r0, r5
 8001720:	bd70      	pop	{r4, r5, r6, pc}
 8001722:	2b00      	cmp	r3, #0
 8001724:	da04      	bge.n	8001730 <_puts_r+0x60>
 8001726:	69a2      	ldr	r2, [r4, #24]
 8001728:	429a      	cmp	r2, r3
 800172a:	dc17      	bgt.n	800175c <_puts_r+0x8c>
 800172c:	290a      	cmp	r1, #10
 800172e:	d015      	beq.n	800175c <_puts_r+0x8c>
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	6022      	str	r2, [r4, #0]
 8001736:	7019      	strb	r1, [r3, #0]
 8001738:	68a3      	ldr	r3, [r4, #8]
 800173a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800173e:	3b01      	subs	r3, #1
 8001740:	60a3      	str	r3, [r4, #8]
 8001742:	2900      	cmp	r1, #0
 8001744:	d1ed      	bne.n	8001722 <_puts_r+0x52>
 8001746:	2b00      	cmp	r3, #0
 8001748:	da11      	bge.n	800176e <_puts_r+0x9e>
 800174a:	4622      	mov	r2, r4
 800174c:	210a      	movs	r1, #10
 800174e:	4628      	mov	r0, r5
 8001750:	f000 f85f 	bl	8001812 <__swbuf_r>
 8001754:	3001      	adds	r0, #1
 8001756:	d0d7      	beq.n	8001708 <_puts_r+0x38>
 8001758:	250a      	movs	r5, #10
 800175a:	e7d7      	b.n	800170c <_puts_r+0x3c>
 800175c:	4622      	mov	r2, r4
 800175e:	4628      	mov	r0, r5
 8001760:	f000 f857 	bl	8001812 <__swbuf_r>
 8001764:	3001      	adds	r0, #1
 8001766:	d1e7      	bne.n	8001738 <_puts_r+0x68>
 8001768:	e7ce      	b.n	8001708 <_puts_r+0x38>
 800176a:	3e01      	subs	r6, #1
 800176c:	e7e4      	b.n	8001738 <_puts_r+0x68>
 800176e:	6823      	ldr	r3, [r4, #0]
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	6022      	str	r2, [r4, #0]
 8001774:	220a      	movs	r2, #10
 8001776:	701a      	strb	r2, [r3, #0]
 8001778:	e7ee      	b.n	8001758 <_puts_r+0x88>
	...

0800177c <puts>:
 800177c:	4b02      	ldr	r3, [pc, #8]	@ (8001788 <puts+0xc>)
 800177e:	4601      	mov	r1, r0
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	f7ff bfa5 	b.w	80016d0 <_puts_r>
 8001786:	bf00      	nop
 8001788:	20000020 	.word	0x20000020

0800178c <__sread>:
 800178c:	b510      	push	{r4, lr}
 800178e:	460c      	mov	r4, r1
 8001790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001794:	f000 f8fc 	bl	8001990 <_read_r>
 8001798:	2800      	cmp	r0, #0
 800179a:	bfab      	itete	ge
 800179c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800179e:	89a3      	ldrhlt	r3, [r4, #12]
 80017a0:	181b      	addge	r3, r3, r0
 80017a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80017a6:	bfac      	ite	ge
 80017a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80017aa:	81a3      	strhlt	r3, [r4, #12]
 80017ac:	bd10      	pop	{r4, pc}

080017ae <__swrite>:
 80017ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017b2:	461f      	mov	r7, r3
 80017b4:	898b      	ldrh	r3, [r1, #12]
 80017b6:	05db      	lsls	r3, r3, #23
 80017b8:	4605      	mov	r5, r0
 80017ba:	460c      	mov	r4, r1
 80017bc:	4616      	mov	r6, r2
 80017be:	d505      	bpl.n	80017cc <__swrite+0x1e>
 80017c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017c4:	2302      	movs	r3, #2
 80017c6:	2200      	movs	r2, #0
 80017c8:	f000 f8d0 	bl	800196c <_lseek_r>
 80017cc:	89a3      	ldrh	r3, [r4, #12]
 80017ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80017d6:	81a3      	strh	r3, [r4, #12]
 80017d8:	4632      	mov	r2, r6
 80017da:	463b      	mov	r3, r7
 80017dc:	4628      	mov	r0, r5
 80017de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80017e2:	f000 b8e7 	b.w	80019b4 <_write_r>

080017e6 <__sseek>:
 80017e6:	b510      	push	{r4, lr}
 80017e8:	460c      	mov	r4, r1
 80017ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017ee:	f000 f8bd 	bl	800196c <_lseek_r>
 80017f2:	1c43      	adds	r3, r0, #1
 80017f4:	89a3      	ldrh	r3, [r4, #12]
 80017f6:	bf15      	itete	ne
 80017f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80017fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80017fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001802:	81a3      	strheq	r3, [r4, #12]
 8001804:	bf18      	it	ne
 8001806:	81a3      	strhne	r3, [r4, #12]
 8001808:	bd10      	pop	{r4, pc}

0800180a <__sclose>:
 800180a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800180e:	f000 b89d 	b.w	800194c <_close_r>

08001812 <__swbuf_r>:
 8001812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001814:	460e      	mov	r6, r1
 8001816:	4614      	mov	r4, r2
 8001818:	4605      	mov	r5, r0
 800181a:	b118      	cbz	r0, 8001824 <__swbuf_r+0x12>
 800181c:	6a03      	ldr	r3, [r0, #32]
 800181e:	b90b      	cbnz	r3, 8001824 <__swbuf_r+0x12>
 8001820:	f7ff ff20 	bl	8001664 <__sinit>
 8001824:	69a3      	ldr	r3, [r4, #24]
 8001826:	60a3      	str	r3, [r4, #8]
 8001828:	89a3      	ldrh	r3, [r4, #12]
 800182a:	071a      	lsls	r2, r3, #28
 800182c:	d501      	bpl.n	8001832 <__swbuf_r+0x20>
 800182e:	6923      	ldr	r3, [r4, #16]
 8001830:	b943      	cbnz	r3, 8001844 <__swbuf_r+0x32>
 8001832:	4621      	mov	r1, r4
 8001834:	4628      	mov	r0, r5
 8001836:	f000 f82b 	bl	8001890 <__swsetup_r>
 800183a:	b118      	cbz	r0, 8001844 <__swbuf_r+0x32>
 800183c:	f04f 37ff 	mov.w	r7, #4294967295
 8001840:	4638      	mov	r0, r7
 8001842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001844:	6823      	ldr	r3, [r4, #0]
 8001846:	6922      	ldr	r2, [r4, #16]
 8001848:	1a98      	subs	r0, r3, r2
 800184a:	6963      	ldr	r3, [r4, #20]
 800184c:	b2f6      	uxtb	r6, r6
 800184e:	4283      	cmp	r3, r0
 8001850:	4637      	mov	r7, r6
 8001852:	dc05      	bgt.n	8001860 <__swbuf_r+0x4e>
 8001854:	4621      	mov	r1, r4
 8001856:	4628      	mov	r0, r5
 8001858:	f000 fa64 	bl	8001d24 <_fflush_r>
 800185c:	2800      	cmp	r0, #0
 800185e:	d1ed      	bne.n	800183c <__swbuf_r+0x2a>
 8001860:	68a3      	ldr	r3, [r4, #8]
 8001862:	3b01      	subs	r3, #1
 8001864:	60a3      	str	r3, [r4, #8]
 8001866:	6823      	ldr	r3, [r4, #0]
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	6022      	str	r2, [r4, #0]
 800186c:	701e      	strb	r6, [r3, #0]
 800186e:	6962      	ldr	r2, [r4, #20]
 8001870:	1c43      	adds	r3, r0, #1
 8001872:	429a      	cmp	r2, r3
 8001874:	d004      	beq.n	8001880 <__swbuf_r+0x6e>
 8001876:	89a3      	ldrh	r3, [r4, #12]
 8001878:	07db      	lsls	r3, r3, #31
 800187a:	d5e1      	bpl.n	8001840 <__swbuf_r+0x2e>
 800187c:	2e0a      	cmp	r6, #10
 800187e:	d1df      	bne.n	8001840 <__swbuf_r+0x2e>
 8001880:	4621      	mov	r1, r4
 8001882:	4628      	mov	r0, r5
 8001884:	f000 fa4e 	bl	8001d24 <_fflush_r>
 8001888:	2800      	cmp	r0, #0
 800188a:	d0d9      	beq.n	8001840 <__swbuf_r+0x2e>
 800188c:	e7d6      	b.n	800183c <__swbuf_r+0x2a>
	...

08001890 <__swsetup_r>:
 8001890:	b538      	push	{r3, r4, r5, lr}
 8001892:	4b29      	ldr	r3, [pc, #164]	@ (8001938 <__swsetup_r+0xa8>)
 8001894:	4605      	mov	r5, r0
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	460c      	mov	r4, r1
 800189a:	b118      	cbz	r0, 80018a4 <__swsetup_r+0x14>
 800189c:	6a03      	ldr	r3, [r0, #32]
 800189e:	b90b      	cbnz	r3, 80018a4 <__swsetup_r+0x14>
 80018a0:	f7ff fee0 	bl	8001664 <__sinit>
 80018a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018a8:	0719      	lsls	r1, r3, #28
 80018aa:	d422      	bmi.n	80018f2 <__swsetup_r+0x62>
 80018ac:	06da      	lsls	r2, r3, #27
 80018ae:	d407      	bmi.n	80018c0 <__swsetup_r+0x30>
 80018b0:	2209      	movs	r2, #9
 80018b2:	602a      	str	r2, [r5, #0]
 80018b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018b8:	81a3      	strh	r3, [r4, #12]
 80018ba:	f04f 30ff 	mov.w	r0, #4294967295
 80018be:	e033      	b.n	8001928 <__swsetup_r+0x98>
 80018c0:	0758      	lsls	r0, r3, #29
 80018c2:	d512      	bpl.n	80018ea <__swsetup_r+0x5a>
 80018c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80018c6:	b141      	cbz	r1, 80018da <__swsetup_r+0x4a>
 80018c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80018cc:	4299      	cmp	r1, r3
 80018ce:	d002      	beq.n	80018d6 <__swsetup_r+0x46>
 80018d0:	4628      	mov	r0, r5
 80018d2:	f000 f8af 	bl	8001a34 <_free_r>
 80018d6:	2300      	movs	r3, #0
 80018d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80018da:	89a3      	ldrh	r3, [r4, #12]
 80018dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80018e0:	81a3      	strh	r3, [r4, #12]
 80018e2:	2300      	movs	r3, #0
 80018e4:	6063      	str	r3, [r4, #4]
 80018e6:	6923      	ldr	r3, [r4, #16]
 80018e8:	6023      	str	r3, [r4, #0]
 80018ea:	89a3      	ldrh	r3, [r4, #12]
 80018ec:	f043 0308 	orr.w	r3, r3, #8
 80018f0:	81a3      	strh	r3, [r4, #12]
 80018f2:	6923      	ldr	r3, [r4, #16]
 80018f4:	b94b      	cbnz	r3, 800190a <__swsetup_r+0x7a>
 80018f6:	89a3      	ldrh	r3, [r4, #12]
 80018f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80018fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001900:	d003      	beq.n	800190a <__swsetup_r+0x7a>
 8001902:	4621      	mov	r1, r4
 8001904:	4628      	mov	r0, r5
 8001906:	f000 fa5b 	bl	8001dc0 <__smakebuf_r>
 800190a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800190e:	f013 0201 	ands.w	r2, r3, #1
 8001912:	d00a      	beq.n	800192a <__swsetup_r+0x9a>
 8001914:	2200      	movs	r2, #0
 8001916:	60a2      	str	r2, [r4, #8]
 8001918:	6962      	ldr	r2, [r4, #20]
 800191a:	4252      	negs	r2, r2
 800191c:	61a2      	str	r2, [r4, #24]
 800191e:	6922      	ldr	r2, [r4, #16]
 8001920:	b942      	cbnz	r2, 8001934 <__swsetup_r+0xa4>
 8001922:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001926:	d1c5      	bne.n	80018b4 <__swsetup_r+0x24>
 8001928:	bd38      	pop	{r3, r4, r5, pc}
 800192a:	0799      	lsls	r1, r3, #30
 800192c:	bf58      	it	pl
 800192e:	6962      	ldrpl	r2, [r4, #20]
 8001930:	60a2      	str	r2, [r4, #8]
 8001932:	e7f4      	b.n	800191e <__swsetup_r+0x8e>
 8001934:	2000      	movs	r0, #0
 8001936:	e7f7      	b.n	8001928 <__swsetup_r+0x98>
 8001938:	20000020 	.word	0x20000020

0800193c <memset>:
 800193c:	4402      	add	r2, r0
 800193e:	4603      	mov	r3, r0
 8001940:	4293      	cmp	r3, r2
 8001942:	d100      	bne.n	8001946 <memset+0xa>
 8001944:	4770      	bx	lr
 8001946:	f803 1b01 	strb.w	r1, [r3], #1
 800194a:	e7f9      	b.n	8001940 <memset+0x4>

0800194c <_close_r>:
 800194c:	b538      	push	{r3, r4, r5, lr}
 800194e:	4d06      	ldr	r5, [pc, #24]	@ (8001968 <_close_r+0x1c>)
 8001950:	2300      	movs	r3, #0
 8001952:	4604      	mov	r4, r0
 8001954:	4608      	mov	r0, r1
 8001956:	602b      	str	r3, [r5, #0]
 8001958:	f7fe fdc3 	bl	80004e2 <_close>
 800195c:	1c43      	adds	r3, r0, #1
 800195e:	d102      	bne.n	8001966 <_close_r+0x1a>
 8001960:	682b      	ldr	r3, [r5, #0]
 8001962:	b103      	cbz	r3, 8001966 <_close_r+0x1a>
 8001964:	6023      	str	r3, [r4, #0]
 8001966:	bd38      	pop	{r3, r4, r5, pc}
 8001968:	200001f4 	.word	0x200001f4

0800196c <_lseek_r>:
 800196c:	b538      	push	{r3, r4, r5, lr}
 800196e:	4d07      	ldr	r5, [pc, #28]	@ (800198c <_lseek_r+0x20>)
 8001970:	4604      	mov	r4, r0
 8001972:	4608      	mov	r0, r1
 8001974:	4611      	mov	r1, r2
 8001976:	2200      	movs	r2, #0
 8001978:	602a      	str	r2, [r5, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	f7fe fdd5 	bl	800052a <_lseek>
 8001980:	1c43      	adds	r3, r0, #1
 8001982:	d102      	bne.n	800198a <_lseek_r+0x1e>
 8001984:	682b      	ldr	r3, [r5, #0]
 8001986:	b103      	cbz	r3, 800198a <_lseek_r+0x1e>
 8001988:	6023      	str	r3, [r4, #0]
 800198a:	bd38      	pop	{r3, r4, r5, pc}
 800198c:	200001f4 	.word	0x200001f4

08001990 <_read_r>:
 8001990:	b538      	push	{r3, r4, r5, lr}
 8001992:	4d07      	ldr	r5, [pc, #28]	@ (80019b0 <_read_r+0x20>)
 8001994:	4604      	mov	r4, r0
 8001996:	4608      	mov	r0, r1
 8001998:	4611      	mov	r1, r2
 800199a:	2200      	movs	r2, #0
 800199c:	602a      	str	r2, [r5, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	f7fe fd66 	bl	8000470 <_read>
 80019a4:	1c43      	adds	r3, r0, #1
 80019a6:	d102      	bne.n	80019ae <_read_r+0x1e>
 80019a8:	682b      	ldr	r3, [r5, #0]
 80019aa:	b103      	cbz	r3, 80019ae <_read_r+0x1e>
 80019ac:	6023      	str	r3, [r4, #0]
 80019ae:	bd38      	pop	{r3, r4, r5, pc}
 80019b0:	200001f4 	.word	0x200001f4

080019b4 <_write_r>:
 80019b4:	b538      	push	{r3, r4, r5, lr}
 80019b6:	4d07      	ldr	r5, [pc, #28]	@ (80019d4 <_write_r+0x20>)
 80019b8:	4604      	mov	r4, r0
 80019ba:	4608      	mov	r0, r1
 80019bc:	4611      	mov	r1, r2
 80019be:	2200      	movs	r2, #0
 80019c0:	602a      	str	r2, [r5, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	f7fe fd71 	bl	80004aa <_write>
 80019c8:	1c43      	adds	r3, r0, #1
 80019ca:	d102      	bne.n	80019d2 <_write_r+0x1e>
 80019cc:	682b      	ldr	r3, [r5, #0]
 80019ce:	b103      	cbz	r3, 80019d2 <_write_r+0x1e>
 80019d0:	6023      	str	r3, [r4, #0]
 80019d2:	bd38      	pop	{r3, r4, r5, pc}
 80019d4:	200001f4 	.word	0x200001f4

080019d8 <__errno>:
 80019d8:	4b01      	ldr	r3, [pc, #4]	@ (80019e0 <__errno+0x8>)
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000020 	.word	0x20000020

080019e4 <__libc_init_array>:
 80019e4:	b570      	push	{r4, r5, r6, lr}
 80019e6:	4d0d      	ldr	r5, [pc, #52]	@ (8001a1c <__libc_init_array+0x38>)
 80019e8:	4c0d      	ldr	r4, [pc, #52]	@ (8001a20 <__libc_init_array+0x3c>)
 80019ea:	1b64      	subs	r4, r4, r5
 80019ec:	10a4      	asrs	r4, r4, #2
 80019ee:	2600      	movs	r6, #0
 80019f0:	42a6      	cmp	r6, r4
 80019f2:	d109      	bne.n	8001a08 <__libc_init_array+0x24>
 80019f4:	4d0b      	ldr	r5, [pc, #44]	@ (8001a24 <__libc_init_array+0x40>)
 80019f6:	4c0c      	ldr	r4, [pc, #48]	@ (8001a28 <__libc_init_array+0x44>)
 80019f8:	f000 fa50 	bl	8001e9c <_init>
 80019fc:	1b64      	subs	r4, r4, r5
 80019fe:	10a4      	asrs	r4, r4, #2
 8001a00:	2600      	movs	r6, #0
 8001a02:	42a6      	cmp	r6, r4
 8001a04:	d105      	bne.n	8001a12 <__libc_init_array+0x2e>
 8001a06:	bd70      	pop	{r4, r5, r6, pc}
 8001a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a0c:	4798      	blx	r3
 8001a0e:	3601      	adds	r6, #1
 8001a10:	e7ee      	b.n	80019f0 <__libc_init_array+0xc>
 8001a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a16:	4798      	blx	r3
 8001a18:	3601      	adds	r6, #1
 8001a1a:	e7f2      	b.n	8001a02 <__libc_init_array+0x1e>
 8001a1c:	08001ee8 	.word	0x08001ee8
 8001a20:	08001ee8 	.word	0x08001ee8
 8001a24:	08001ee8 	.word	0x08001ee8
 8001a28:	08001eec 	.word	0x08001eec

08001a2c <__retarget_lock_init_recursive>:
 8001a2c:	4770      	bx	lr

08001a2e <__retarget_lock_acquire_recursive>:
 8001a2e:	4770      	bx	lr

08001a30 <__retarget_lock_release_recursive>:
 8001a30:	4770      	bx	lr
	...

08001a34 <_free_r>:
 8001a34:	b538      	push	{r3, r4, r5, lr}
 8001a36:	4605      	mov	r5, r0
 8001a38:	2900      	cmp	r1, #0
 8001a3a:	d041      	beq.n	8001ac0 <_free_r+0x8c>
 8001a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a40:	1f0c      	subs	r4, r1, #4
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	bfb8      	it	lt
 8001a46:	18e4      	addlt	r4, r4, r3
 8001a48:	f000 f8e0 	bl	8001c0c <__malloc_lock>
 8001a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac4 <_free_r+0x90>)
 8001a4e:	6813      	ldr	r3, [r2, #0]
 8001a50:	b933      	cbnz	r3, 8001a60 <_free_r+0x2c>
 8001a52:	6063      	str	r3, [r4, #4]
 8001a54:	6014      	str	r4, [r2, #0]
 8001a56:	4628      	mov	r0, r5
 8001a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a5c:	f000 b8dc 	b.w	8001c18 <__malloc_unlock>
 8001a60:	42a3      	cmp	r3, r4
 8001a62:	d908      	bls.n	8001a76 <_free_r+0x42>
 8001a64:	6820      	ldr	r0, [r4, #0]
 8001a66:	1821      	adds	r1, r4, r0
 8001a68:	428b      	cmp	r3, r1
 8001a6a:	bf01      	itttt	eq
 8001a6c:	6819      	ldreq	r1, [r3, #0]
 8001a6e:	685b      	ldreq	r3, [r3, #4]
 8001a70:	1809      	addeq	r1, r1, r0
 8001a72:	6021      	streq	r1, [r4, #0]
 8001a74:	e7ed      	b.n	8001a52 <_free_r+0x1e>
 8001a76:	461a      	mov	r2, r3
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	b10b      	cbz	r3, 8001a80 <_free_r+0x4c>
 8001a7c:	42a3      	cmp	r3, r4
 8001a7e:	d9fa      	bls.n	8001a76 <_free_r+0x42>
 8001a80:	6811      	ldr	r1, [r2, #0]
 8001a82:	1850      	adds	r0, r2, r1
 8001a84:	42a0      	cmp	r0, r4
 8001a86:	d10b      	bne.n	8001aa0 <_free_r+0x6c>
 8001a88:	6820      	ldr	r0, [r4, #0]
 8001a8a:	4401      	add	r1, r0
 8001a8c:	1850      	adds	r0, r2, r1
 8001a8e:	4283      	cmp	r3, r0
 8001a90:	6011      	str	r1, [r2, #0]
 8001a92:	d1e0      	bne.n	8001a56 <_free_r+0x22>
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	6053      	str	r3, [r2, #4]
 8001a9a:	4408      	add	r0, r1
 8001a9c:	6010      	str	r0, [r2, #0]
 8001a9e:	e7da      	b.n	8001a56 <_free_r+0x22>
 8001aa0:	d902      	bls.n	8001aa8 <_free_r+0x74>
 8001aa2:	230c      	movs	r3, #12
 8001aa4:	602b      	str	r3, [r5, #0]
 8001aa6:	e7d6      	b.n	8001a56 <_free_r+0x22>
 8001aa8:	6820      	ldr	r0, [r4, #0]
 8001aaa:	1821      	adds	r1, r4, r0
 8001aac:	428b      	cmp	r3, r1
 8001aae:	bf04      	itt	eq
 8001ab0:	6819      	ldreq	r1, [r3, #0]
 8001ab2:	685b      	ldreq	r3, [r3, #4]
 8001ab4:	6063      	str	r3, [r4, #4]
 8001ab6:	bf04      	itt	eq
 8001ab8:	1809      	addeq	r1, r1, r0
 8001aba:	6021      	streq	r1, [r4, #0]
 8001abc:	6054      	str	r4, [r2, #4]
 8001abe:	e7ca      	b.n	8001a56 <_free_r+0x22>
 8001ac0:	bd38      	pop	{r3, r4, r5, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000200 	.word	0x20000200

08001ac8 <sbrk_aligned>:
 8001ac8:	b570      	push	{r4, r5, r6, lr}
 8001aca:	4e0f      	ldr	r6, [pc, #60]	@ (8001b08 <sbrk_aligned+0x40>)
 8001acc:	460c      	mov	r4, r1
 8001ace:	6831      	ldr	r1, [r6, #0]
 8001ad0:	4605      	mov	r5, r0
 8001ad2:	b911      	cbnz	r1, 8001ada <sbrk_aligned+0x12>
 8001ad4:	f000 f9d2 	bl	8001e7c <_sbrk_r>
 8001ad8:	6030      	str	r0, [r6, #0]
 8001ada:	4621      	mov	r1, r4
 8001adc:	4628      	mov	r0, r5
 8001ade:	f000 f9cd 	bl	8001e7c <_sbrk_r>
 8001ae2:	1c43      	adds	r3, r0, #1
 8001ae4:	d103      	bne.n	8001aee <sbrk_aligned+0x26>
 8001ae6:	f04f 34ff 	mov.w	r4, #4294967295
 8001aea:	4620      	mov	r0, r4
 8001aec:	bd70      	pop	{r4, r5, r6, pc}
 8001aee:	1cc4      	adds	r4, r0, #3
 8001af0:	f024 0403 	bic.w	r4, r4, #3
 8001af4:	42a0      	cmp	r0, r4
 8001af6:	d0f8      	beq.n	8001aea <sbrk_aligned+0x22>
 8001af8:	1a21      	subs	r1, r4, r0
 8001afa:	4628      	mov	r0, r5
 8001afc:	f000 f9be 	bl	8001e7c <_sbrk_r>
 8001b00:	3001      	adds	r0, #1
 8001b02:	d1f2      	bne.n	8001aea <sbrk_aligned+0x22>
 8001b04:	e7ef      	b.n	8001ae6 <sbrk_aligned+0x1e>
 8001b06:	bf00      	nop
 8001b08:	200001fc 	.word	0x200001fc

08001b0c <_malloc_r>:
 8001b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b10:	1ccd      	adds	r5, r1, #3
 8001b12:	f025 0503 	bic.w	r5, r5, #3
 8001b16:	3508      	adds	r5, #8
 8001b18:	2d0c      	cmp	r5, #12
 8001b1a:	bf38      	it	cc
 8001b1c:	250c      	movcc	r5, #12
 8001b1e:	2d00      	cmp	r5, #0
 8001b20:	4606      	mov	r6, r0
 8001b22:	db01      	blt.n	8001b28 <_malloc_r+0x1c>
 8001b24:	42a9      	cmp	r1, r5
 8001b26:	d904      	bls.n	8001b32 <_malloc_r+0x26>
 8001b28:	230c      	movs	r3, #12
 8001b2a:	6033      	str	r3, [r6, #0]
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001c08 <_malloc_r+0xfc>
 8001b36:	f000 f869 	bl	8001c0c <__malloc_lock>
 8001b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8001b3e:	461c      	mov	r4, r3
 8001b40:	bb44      	cbnz	r4, 8001b94 <_malloc_r+0x88>
 8001b42:	4629      	mov	r1, r5
 8001b44:	4630      	mov	r0, r6
 8001b46:	f7ff ffbf 	bl	8001ac8 <sbrk_aligned>
 8001b4a:	1c43      	adds	r3, r0, #1
 8001b4c:	4604      	mov	r4, r0
 8001b4e:	d158      	bne.n	8001c02 <_malloc_r+0xf6>
 8001b50:	f8d8 4000 	ldr.w	r4, [r8]
 8001b54:	4627      	mov	r7, r4
 8001b56:	2f00      	cmp	r7, #0
 8001b58:	d143      	bne.n	8001be2 <_malloc_r+0xd6>
 8001b5a:	2c00      	cmp	r4, #0
 8001b5c:	d04b      	beq.n	8001bf6 <_malloc_r+0xea>
 8001b5e:	6823      	ldr	r3, [r4, #0]
 8001b60:	4639      	mov	r1, r7
 8001b62:	4630      	mov	r0, r6
 8001b64:	eb04 0903 	add.w	r9, r4, r3
 8001b68:	f000 f988 	bl	8001e7c <_sbrk_r>
 8001b6c:	4581      	cmp	r9, r0
 8001b6e:	d142      	bne.n	8001bf6 <_malloc_r+0xea>
 8001b70:	6821      	ldr	r1, [r4, #0]
 8001b72:	1a6d      	subs	r5, r5, r1
 8001b74:	4629      	mov	r1, r5
 8001b76:	4630      	mov	r0, r6
 8001b78:	f7ff ffa6 	bl	8001ac8 <sbrk_aligned>
 8001b7c:	3001      	adds	r0, #1
 8001b7e:	d03a      	beq.n	8001bf6 <_malloc_r+0xea>
 8001b80:	6823      	ldr	r3, [r4, #0]
 8001b82:	442b      	add	r3, r5
 8001b84:	6023      	str	r3, [r4, #0]
 8001b86:	f8d8 3000 	ldr.w	r3, [r8]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	bb62      	cbnz	r2, 8001be8 <_malloc_r+0xdc>
 8001b8e:	f8c8 7000 	str.w	r7, [r8]
 8001b92:	e00f      	b.n	8001bb4 <_malloc_r+0xa8>
 8001b94:	6822      	ldr	r2, [r4, #0]
 8001b96:	1b52      	subs	r2, r2, r5
 8001b98:	d420      	bmi.n	8001bdc <_malloc_r+0xd0>
 8001b9a:	2a0b      	cmp	r2, #11
 8001b9c:	d917      	bls.n	8001bce <_malloc_r+0xc2>
 8001b9e:	1961      	adds	r1, r4, r5
 8001ba0:	42a3      	cmp	r3, r4
 8001ba2:	6025      	str	r5, [r4, #0]
 8001ba4:	bf18      	it	ne
 8001ba6:	6059      	strne	r1, [r3, #4]
 8001ba8:	6863      	ldr	r3, [r4, #4]
 8001baa:	bf08      	it	eq
 8001bac:	f8c8 1000 	streq.w	r1, [r8]
 8001bb0:	5162      	str	r2, [r4, r5]
 8001bb2:	604b      	str	r3, [r1, #4]
 8001bb4:	4630      	mov	r0, r6
 8001bb6:	f000 f82f 	bl	8001c18 <__malloc_unlock>
 8001bba:	f104 000b 	add.w	r0, r4, #11
 8001bbe:	1d23      	adds	r3, r4, #4
 8001bc0:	f020 0007 	bic.w	r0, r0, #7
 8001bc4:	1ac2      	subs	r2, r0, r3
 8001bc6:	bf1c      	itt	ne
 8001bc8:	1a1b      	subne	r3, r3, r0
 8001bca:	50a3      	strne	r3, [r4, r2]
 8001bcc:	e7af      	b.n	8001b2e <_malloc_r+0x22>
 8001bce:	6862      	ldr	r2, [r4, #4]
 8001bd0:	42a3      	cmp	r3, r4
 8001bd2:	bf0c      	ite	eq
 8001bd4:	f8c8 2000 	streq.w	r2, [r8]
 8001bd8:	605a      	strne	r2, [r3, #4]
 8001bda:	e7eb      	b.n	8001bb4 <_malloc_r+0xa8>
 8001bdc:	4623      	mov	r3, r4
 8001bde:	6864      	ldr	r4, [r4, #4]
 8001be0:	e7ae      	b.n	8001b40 <_malloc_r+0x34>
 8001be2:	463c      	mov	r4, r7
 8001be4:	687f      	ldr	r7, [r7, #4]
 8001be6:	e7b6      	b.n	8001b56 <_malloc_r+0x4a>
 8001be8:	461a      	mov	r2, r3
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	42a3      	cmp	r3, r4
 8001bee:	d1fb      	bne.n	8001be8 <_malloc_r+0xdc>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	6053      	str	r3, [r2, #4]
 8001bf4:	e7de      	b.n	8001bb4 <_malloc_r+0xa8>
 8001bf6:	230c      	movs	r3, #12
 8001bf8:	6033      	str	r3, [r6, #0]
 8001bfa:	4630      	mov	r0, r6
 8001bfc:	f000 f80c 	bl	8001c18 <__malloc_unlock>
 8001c00:	e794      	b.n	8001b2c <_malloc_r+0x20>
 8001c02:	6005      	str	r5, [r0, #0]
 8001c04:	e7d6      	b.n	8001bb4 <_malloc_r+0xa8>
 8001c06:	bf00      	nop
 8001c08:	20000200 	.word	0x20000200

08001c0c <__malloc_lock>:
 8001c0c:	4801      	ldr	r0, [pc, #4]	@ (8001c14 <__malloc_lock+0x8>)
 8001c0e:	f7ff bf0e 	b.w	8001a2e <__retarget_lock_acquire_recursive>
 8001c12:	bf00      	nop
 8001c14:	200001f8 	.word	0x200001f8

08001c18 <__malloc_unlock>:
 8001c18:	4801      	ldr	r0, [pc, #4]	@ (8001c20 <__malloc_unlock+0x8>)
 8001c1a:	f7ff bf09 	b.w	8001a30 <__retarget_lock_release_recursive>
 8001c1e:	bf00      	nop
 8001c20:	200001f8 	.word	0x200001f8

08001c24 <__sflush_r>:
 8001c24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c2a:	0716      	lsls	r6, r2, #28
 8001c2c:	4605      	mov	r5, r0
 8001c2e:	460c      	mov	r4, r1
 8001c30:	d454      	bmi.n	8001cdc <__sflush_r+0xb8>
 8001c32:	684b      	ldr	r3, [r1, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	dc02      	bgt.n	8001c3e <__sflush_r+0x1a>
 8001c38:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	dd48      	ble.n	8001cd0 <__sflush_r+0xac>
 8001c3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001c40:	2e00      	cmp	r6, #0
 8001c42:	d045      	beq.n	8001cd0 <__sflush_r+0xac>
 8001c44:	2300      	movs	r3, #0
 8001c46:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001c4a:	682f      	ldr	r7, [r5, #0]
 8001c4c:	6a21      	ldr	r1, [r4, #32]
 8001c4e:	602b      	str	r3, [r5, #0]
 8001c50:	d030      	beq.n	8001cb4 <__sflush_r+0x90>
 8001c52:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001c54:	89a3      	ldrh	r3, [r4, #12]
 8001c56:	0759      	lsls	r1, r3, #29
 8001c58:	d505      	bpl.n	8001c66 <__sflush_r+0x42>
 8001c5a:	6863      	ldr	r3, [r4, #4]
 8001c5c:	1ad2      	subs	r2, r2, r3
 8001c5e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001c60:	b10b      	cbz	r3, 8001c66 <__sflush_r+0x42>
 8001c62:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c64:	1ad2      	subs	r2, r2, r3
 8001c66:	2300      	movs	r3, #0
 8001c68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001c6a:	6a21      	ldr	r1, [r4, #32]
 8001c6c:	4628      	mov	r0, r5
 8001c6e:	47b0      	blx	r6
 8001c70:	1c43      	adds	r3, r0, #1
 8001c72:	89a3      	ldrh	r3, [r4, #12]
 8001c74:	d106      	bne.n	8001c84 <__sflush_r+0x60>
 8001c76:	6829      	ldr	r1, [r5, #0]
 8001c78:	291d      	cmp	r1, #29
 8001c7a:	d82b      	bhi.n	8001cd4 <__sflush_r+0xb0>
 8001c7c:	4a28      	ldr	r2, [pc, #160]	@ (8001d20 <__sflush_r+0xfc>)
 8001c7e:	410a      	asrs	r2, r1
 8001c80:	07d6      	lsls	r6, r2, #31
 8001c82:	d427      	bmi.n	8001cd4 <__sflush_r+0xb0>
 8001c84:	2200      	movs	r2, #0
 8001c86:	6062      	str	r2, [r4, #4]
 8001c88:	04d9      	lsls	r1, r3, #19
 8001c8a:	6922      	ldr	r2, [r4, #16]
 8001c8c:	6022      	str	r2, [r4, #0]
 8001c8e:	d504      	bpl.n	8001c9a <__sflush_r+0x76>
 8001c90:	1c42      	adds	r2, r0, #1
 8001c92:	d101      	bne.n	8001c98 <__sflush_r+0x74>
 8001c94:	682b      	ldr	r3, [r5, #0]
 8001c96:	b903      	cbnz	r3, 8001c9a <__sflush_r+0x76>
 8001c98:	6560      	str	r0, [r4, #84]	@ 0x54
 8001c9a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001c9c:	602f      	str	r7, [r5, #0]
 8001c9e:	b1b9      	cbz	r1, 8001cd0 <__sflush_r+0xac>
 8001ca0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001ca4:	4299      	cmp	r1, r3
 8001ca6:	d002      	beq.n	8001cae <__sflush_r+0x8a>
 8001ca8:	4628      	mov	r0, r5
 8001caa:	f7ff fec3 	bl	8001a34 <_free_r>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8001cb2:	e00d      	b.n	8001cd0 <__sflush_r+0xac>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	4628      	mov	r0, r5
 8001cb8:	47b0      	blx	r6
 8001cba:	4602      	mov	r2, r0
 8001cbc:	1c50      	adds	r0, r2, #1
 8001cbe:	d1c9      	bne.n	8001c54 <__sflush_r+0x30>
 8001cc0:	682b      	ldr	r3, [r5, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0c6      	beq.n	8001c54 <__sflush_r+0x30>
 8001cc6:	2b1d      	cmp	r3, #29
 8001cc8:	d001      	beq.n	8001cce <__sflush_r+0xaa>
 8001cca:	2b16      	cmp	r3, #22
 8001ccc:	d11d      	bne.n	8001d0a <__sflush_r+0xe6>
 8001cce:	602f      	str	r7, [r5, #0]
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	e021      	b.n	8001d18 <__sflush_r+0xf4>
 8001cd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	e01a      	b.n	8001d12 <__sflush_r+0xee>
 8001cdc:	690f      	ldr	r7, [r1, #16]
 8001cde:	2f00      	cmp	r7, #0
 8001ce0:	d0f6      	beq.n	8001cd0 <__sflush_r+0xac>
 8001ce2:	0793      	lsls	r3, r2, #30
 8001ce4:	680e      	ldr	r6, [r1, #0]
 8001ce6:	bf08      	it	eq
 8001ce8:	694b      	ldreq	r3, [r1, #20]
 8001cea:	600f      	str	r7, [r1, #0]
 8001cec:	bf18      	it	ne
 8001cee:	2300      	movne	r3, #0
 8001cf0:	1bf6      	subs	r6, r6, r7
 8001cf2:	608b      	str	r3, [r1, #8]
 8001cf4:	2e00      	cmp	r6, #0
 8001cf6:	ddeb      	ble.n	8001cd0 <__sflush_r+0xac>
 8001cf8:	6a21      	ldr	r1, [r4, #32]
 8001cfa:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001cfe:	4633      	mov	r3, r6
 8001d00:	463a      	mov	r2, r7
 8001d02:	4628      	mov	r0, r5
 8001d04:	47e0      	blx	ip
 8001d06:	2800      	cmp	r0, #0
 8001d08:	dc07      	bgt.n	8001d1a <__sflush_r+0xf6>
 8001d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d12:	81a3      	strh	r3, [r4, #12]
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d1a:	4407      	add	r7, r0
 8001d1c:	1a36      	subs	r6, r6, r0
 8001d1e:	e7e9      	b.n	8001cf4 <__sflush_r+0xd0>
 8001d20:	dfbffffe 	.word	0xdfbffffe

08001d24 <_fflush_r>:
 8001d24:	b538      	push	{r3, r4, r5, lr}
 8001d26:	690b      	ldr	r3, [r1, #16]
 8001d28:	4605      	mov	r5, r0
 8001d2a:	460c      	mov	r4, r1
 8001d2c:	b913      	cbnz	r3, 8001d34 <_fflush_r+0x10>
 8001d2e:	2500      	movs	r5, #0
 8001d30:	4628      	mov	r0, r5
 8001d32:	bd38      	pop	{r3, r4, r5, pc}
 8001d34:	b118      	cbz	r0, 8001d3e <_fflush_r+0x1a>
 8001d36:	6a03      	ldr	r3, [r0, #32]
 8001d38:	b90b      	cbnz	r3, 8001d3e <_fflush_r+0x1a>
 8001d3a:	f7ff fc93 	bl	8001664 <__sinit>
 8001d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f3      	beq.n	8001d2e <_fflush_r+0xa>
 8001d46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001d48:	07d0      	lsls	r0, r2, #31
 8001d4a:	d404      	bmi.n	8001d56 <_fflush_r+0x32>
 8001d4c:	0599      	lsls	r1, r3, #22
 8001d4e:	d402      	bmi.n	8001d56 <_fflush_r+0x32>
 8001d50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001d52:	f7ff fe6c 	bl	8001a2e <__retarget_lock_acquire_recursive>
 8001d56:	4628      	mov	r0, r5
 8001d58:	4621      	mov	r1, r4
 8001d5a:	f7ff ff63 	bl	8001c24 <__sflush_r>
 8001d5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001d60:	07da      	lsls	r2, r3, #31
 8001d62:	4605      	mov	r5, r0
 8001d64:	d4e4      	bmi.n	8001d30 <_fflush_r+0xc>
 8001d66:	89a3      	ldrh	r3, [r4, #12]
 8001d68:	059b      	lsls	r3, r3, #22
 8001d6a:	d4e1      	bmi.n	8001d30 <_fflush_r+0xc>
 8001d6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001d6e:	f7ff fe5f 	bl	8001a30 <__retarget_lock_release_recursive>
 8001d72:	e7dd      	b.n	8001d30 <_fflush_r+0xc>

08001d74 <__swhatbuf_r>:
 8001d74:	b570      	push	{r4, r5, r6, lr}
 8001d76:	460c      	mov	r4, r1
 8001d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d7c:	2900      	cmp	r1, #0
 8001d7e:	b096      	sub	sp, #88	@ 0x58
 8001d80:	4615      	mov	r5, r2
 8001d82:	461e      	mov	r6, r3
 8001d84:	da0d      	bge.n	8001da2 <__swhatbuf_r+0x2e>
 8001d86:	89a3      	ldrh	r3, [r4, #12]
 8001d88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001d8c:	f04f 0100 	mov.w	r1, #0
 8001d90:	bf14      	ite	ne
 8001d92:	2340      	movne	r3, #64	@ 0x40
 8001d94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001d98:	2000      	movs	r0, #0
 8001d9a:	6031      	str	r1, [r6, #0]
 8001d9c:	602b      	str	r3, [r5, #0]
 8001d9e:	b016      	add	sp, #88	@ 0x58
 8001da0:	bd70      	pop	{r4, r5, r6, pc}
 8001da2:	466a      	mov	r2, sp
 8001da4:	f000 f848 	bl	8001e38 <_fstat_r>
 8001da8:	2800      	cmp	r0, #0
 8001daa:	dbec      	blt.n	8001d86 <__swhatbuf_r+0x12>
 8001dac:	9901      	ldr	r1, [sp, #4]
 8001dae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001db2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001db6:	4259      	negs	r1, r3
 8001db8:	4159      	adcs	r1, r3
 8001dba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dbe:	e7eb      	b.n	8001d98 <__swhatbuf_r+0x24>

08001dc0 <__smakebuf_r>:
 8001dc0:	898b      	ldrh	r3, [r1, #12]
 8001dc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001dc4:	079d      	lsls	r5, r3, #30
 8001dc6:	4606      	mov	r6, r0
 8001dc8:	460c      	mov	r4, r1
 8001dca:	d507      	bpl.n	8001ddc <__smakebuf_r+0x1c>
 8001dcc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001dd0:	6023      	str	r3, [r4, #0]
 8001dd2:	6123      	str	r3, [r4, #16]
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	6163      	str	r3, [r4, #20]
 8001dd8:	b003      	add	sp, #12
 8001dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ddc:	ab01      	add	r3, sp, #4
 8001dde:	466a      	mov	r2, sp
 8001de0:	f7ff ffc8 	bl	8001d74 <__swhatbuf_r>
 8001de4:	9f00      	ldr	r7, [sp, #0]
 8001de6:	4605      	mov	r5, r0
 8001de8:	4639      	mov	r1, r7
 8001dea:	4630      	mov	r0, r6
 8001dec:	f7ff fe8e 	bl	8001b0c <_malloc_r>
 8001df0:	b948      	cbnz	r0, 8001e06 <__smakebuf_r+0x46>
 8001df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001df6:	059a      	lsls	r2, r3, #22
 8001df8:	d4ee      	bmi.n	8001dd8 <__smakebuf_r+0x18>
 8001dfa:	f023 0303 	bic.w	r3, r3, #3
 8001dfe:	f043 0302 	orr.w	r3, r3, #2
 8001e02:	81a3      	strh	r3, [r4, #12]
 8001e04:	e7e2      	b.n	8001dcc <__smakebuf_r+0xc>
 8001e06:	89a3      	ldrh	r3, [r4, #12]
 8001e08:	6020      	str	r0, [r4, #0]
 8001e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e0e:	81a3      	strh	r3, [r4, #12]
 8001e10:	9b01      	ldr	r3, [sp, #4]
 8001e12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001e16:	b15b      	cbz	r3, 8001e30 <__smakebuf_r+0x70>
 8001e18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e1c:	4630      	mov	r0, r6
 8001e1e:	f000 f81d 	bl	8001e5c <_isatty_r>
 8001e22:	b128      	cbz	r0, 8001e30 <__smakebuf_r+0x70>
 8001e24:	89a3      	ldrh	r3, [r4, #12]
 8001e26:	f023 0303 	bic.w	r3, r3, #3
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	81a3      	strh	r3, [r4, #12]
 8001e30:	89a3      	ldrh	r3, [r4, #12]
 8001e32:	431d      	orrs	r5, r3
 8001e34:	81a5      	strh	r5, [r4, #12]
 8001e36:	e7cf      	b.n	8001dd8 <__smakebuf_r+0x18>

08001e38 <_fstat_r>:
 8001e38:	b538      	push	{r3, r4, r5, lr}
 8001e3a:	4d07      	ldr	r5, [pc, #28]	@ (8001e58 <_fstat_r+0x20>)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	4604      	mov	r4, r0
 8001e40:	4608      	mov	r0, r1
 8001e42:	4611      	mov	r1, r2
 8001e44:	602b      	str	r3, [r5, #0]
 8001e46:	f7fe fb57 	bl	80004f8 <_fstat>
 8001e4a:	1c43      	adds	r3, r0, #1
 8001e4c:	d102      	bne.n	8001e54 <_fstat_r+0x1c>
 8001e4e:	682b      	ldr	r3, [r5, #0]
 8001e50:	b103      	cbz	r3, 8001e54 <_fstat_r+0x1c>
 8001e52:	6023      	str	r3, [r4, #0]
 8001e54:	bd38      	pop	{r3, r4, r5, pc}
 8001e56:	bf00      	nop
 8001e58:	200001f4 	.word	0x200001f4

08001e5c <_isatty_r>:
 8001e5c:	b538      	push	{r3, r4, r5, lr}
 8001e5e:	4d06      	ldr	r5, [pc, #24]	@ (8001e78 <_isatty_r+0x1c>)
 8001e60:	2300      	movs	r3, #0
 8001e62:	4604      	mov	r4, r0
 8001e64:	4608      	mov	r0, r1
 8001e66:	602b      	str	r3, [r5, #0]
 8001e68:	f7fe fb55 	bl	8000516 <_isatty>
 8001e6c:	1c43      	adds	r3, r0, #1
 8001e6e:	d102      	bne.n	8001e76 <_isatty_r+0x1a>
 8001e70:	682b      	ldr	r3, [r5, #0]
 8001e72:	b103      	cbz	r3, 8001e76 <_isatty_r+0x1a>
 8001e74:	6023      	str	r3, [r4, #0]
 8001e76:	bd38      	pop	{r3, r4, r5, pc}
 8001e78:	200001f4 	.word	0x200001f4

08001e7c <_sbrk_r>:
 8001e7c:	b538      	push	{r3, r4, r5, lr}
 8001e7e:	4d06      	ldr	r5, [pc, #24]	@ (8001e98 <_sbrk_r+0x1c>)
 8001e80:	2300      	movs	r3, #0
 8001e82:	4604      	mov	r4, r0
 8001e84:	4608      	mov	r0, r1
 8001e86:	602b      	str	r3, [r5, #0]
 8001e88:	f7fe fb5c 	bl	8000544 <_sbrk>
 8001e8c:	1c43      	adds	r3, r0, #1
 8001e8e:	d102      	bne.n	8001e96 <_sbrk_r+0x1a>
 8001e90:	682b      	ldr	r3, [r5, #0]
 8001e92:	b103      	cbz	r3, 8001e96 <_sbrk_r+0x1a>
 8001e94:	6023      	str	r3, [r4, #0]
 8001e96:	bd38      	pop	{r3, r4, r5, pc}
 8001e98:	200001f4 	.word	0x200001f4

08001e9c <_init>:
 8001e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9e:	bf00      	nop
 8001ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ea2:	bc08      	pop	{r3}
 8001ea4:	469e      	mov	lr, r3
 8001ea6:	4770      	bx	lr

08001ea8 <_fini>:
 8001ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eaa:	bf00      	nop
 8001eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eae:	bc08      	pop	{r3}
 8001eb0:	469e      	mov	lr, r3
 8001eb2:	4770      	bx	lr
